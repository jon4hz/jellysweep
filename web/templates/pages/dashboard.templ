package pages

import (
	"fmt"
	"github.com/jon4hz/jellysweep/api/models"
	"github.com/jon4hz/jellysweep/web/templates"
	"github.com/jon4hz/jellysweep/web/templates/components"
	"strings"
	"time"
)

// formatExactDate formats a time.Time as an exact date string for tooltips
func formatExactDate(t time.Time) string {
	return t.Format("January 2, 2006 at 15:04 MST")
}

// getEpisodeTooltip generates a tooltip for episode cleanup mode
func getEpisodeTooltip(keepCount int) string {
	var b strings.Builder
	b.WriteString("Unless requested otherwise, Jellysweep will delete ")
	if keepCount <= 0 {
		b.WriteString("all episodes.")
		return b.String()
	}
	if keepCount == 1 {
		b.WriteString("everything except the first episode.")
		return b.String()
	}

	// Use written numbers for small values
	var countText string
	switch keepCount {
	case 2:
		countText = "two"
	case 3:
		countText = "three"
	case 4:
		countText = "four"
	case 5:
		countText = "five"
	default:
		countText = fmt.Sprintf("%d", keepCount)
	}

	b.WriteString(fmt.Sprintf("everything except the first %s episodes.", countText))
	return b.String()
}

// getSeasonTooltip generates a tooltip for season cleanup mode
func getSeasonTooltip(keepCount int) string {
	var b strings.Builder
	b.WriteString("Unless requested otherwise, Jellysweep will delete ")
	if keepCount <= 0 {
		b.WriteString("all seasons.")
		return b.String()
	}
	if keepCount == 1 {
		b.WriteString("everything except the first season.")
		return b.String()
	}

	// Use written numbers for small values
	var countText string
	switch keepCount {
	case 2:
		countText = "two"
	case 3:
		countText = "three"
	case 4:
		countText = "four"
	case 5:
		countText = "five"
	default:
		countText = fmt.Sprintf("%d", keepCount)
	}
	b.WriteString(fmt.Sprintf("everything except the first %s seasons.", countText))
	return b.String()
}

templ Dashboard(user *models.User, mediaItems []models.MediaItem) {
	@DashboardWithPendingRequests(user, mediaItems, 0)
}

templ DashboardWithPendingRequests(user *models.User, mediaItems []models.MediaItem, pendingRequestsCount int) {
	if user != nil && user.IsAdmin {
		@templates.LayoutWithPendingRequests("Dashboard", user, pendingRequestsCount) {
			@DashboardContent(user, mediaItems)
		}
	} else {
		@templates.Layout("Dashboard", user) {
			@DashboardContent(user, mediaItems)
		}
	}
}

templ DashboardContent(user *models.User, mediaItems []models.MediaItem) {
	<div class="space-y-6">
		<!-- Header -->
		<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
			<div>
				<h1 class="text-3xl font-bold text-gray-100">Media Dashboard</h1>
				<p class="mt-1 text-sm text-gray-400">
					Manage media scheduled for deletion from your libraries
				</p>
			</div>
			<div class="mt-4 sm:mt-0">
				if len(mediaItems) == 0 {
					<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-green-900 text-green-200">
						No items scheduled for deletion
					</span>
				} else {
					<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-red-900 text-red-200">
						{ len(mediaItems) } items scheduled for deletion
					</span>
				}
			</div>
		</div>
		@DashboardTabs(mediaItems)
	</div>
	<!-- Include shared utility scripts -->
	@templates.ToastScript()
	@templates.ButtonLoadingUtils()
	@templates.ApiUtils()
	@templates.DebounceUtil()
	@templates.SmoothNavigationUtils()
	<!-- Include tab functionality -->
	@components.TabsScript()
	<!-- Include optimized grid script -->
	@components.MediaGridScript()
	@components.DashboardMediaGridScript()
	@components.StatsScript()
	@dashboardScripts()
}

// DashboardTabs creates the tab interface for the dashboard
templ DashboardTabs(mediaItems []models.MediaItem) {
	@components.TabContainer("dashboard-tabs") {
		@components.TabButton("deletion-queue", "Overview", `<svg class="w-4 h-4 mr-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path></svg>`, true)
		if len(mediaItems) > 0 {
			@components.TabButton("cleanup-timeline", "Stats", `<svg class="w-4 h-4 mr-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path></svg>`, false)
		}
	}
	@components.TabContentContainer() {
		@components.TabContent("deletion-queue", true) {
			@OverviewTab(mediaItems)
		}
		if len(mediaItems) > 0 {
			@components.TabContent("cleanup-timeline", false) {
				@components.StatsTab(mediaItems)
			}
		}
	}
}

templ EmptyState() {
	<div class="text-center py-12">
		<div class="mx-auto w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mb-6">
			<svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4"></path>
			</svg>
		</div>
		<h3 class="text-xl font-semibold text-gray-300 mb-2">No media scheduled for deletion</h3>
		<p class="text-gray-500 mb-6">
			All your media is safe! Check back later or refresh to see if anything changes.
		</p>
		<button
			id="refresh-btn"
			class="inline-flex items-center px-4 py-2 border border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
		>
			<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
			</svg>
			Refresh
		</button>
	</div>
}

script dashboardScripts() {
	// Initialize all functionality when DOM loads
	document.addEventListener('DOMContentLoaded', function() {
		initializeTabs('dashboard-tabs');
		initializeDashboardGrid();
		initializeMediaRequests();

		// Initialize optimized charts from stats component
		if (window.initializeOptimizedCharts) {
			window.initializeOptimizedCharts();
		}
	});

	function initializeDashboardGrid() {
		// Initialize the media grid with data from the JSON script
		const dataScript = document.getElementById('media-items-data');
		if (dataScript && window.dashboardMediaGridManager) {
			try {
				const mediaItems = JSON.parse(dataScript.textContent);
				// Convert server data to client format
				const clientItems = mediaItems.map(item => ({
					...item,
					// Ensure proper data format for client-side handling
					id: item.ID || item.id,
					title: item.Title || item.title,
					library: item.Library || item.library,
					posterURL: item.PosterURL || item.posterURL,
					fileSize: parseInt(item.FileSize || item.fileSize || 0),
					deletionTimestamp: item.DeletionDate ? new Date(item.DeletionDate).getTime() : 0,
					hasRequested: item.HasRequested || item.hasRequested,
					canRequest: item.CanRequest || item.canRequest,
					mustDelete: item.MustDelete || item.mustDelete,
					cleanupMode: item.CleanupMode || item.cleanupMode,
					keepCount: parseInt(item.KeepCount || item.keepCount || 0),
					type: item.Type || item.type,
					year: parseInt(item.Year || item.year || 0)
				}));

				// Set items in the grid manager
				window.dashboardMediaGridManager.setItems(clientItems);
			} catch (error) {
				console.error('Error initializing dashboard grid:', error);
				// Fallback to original grid if there's an error
				showFallbackGrid();
			}
		}

		// Setup refresh button - works for both empty state and grid state
		const refreshBtn = document.getElementById('refresh-btn');
		if (refreshBtn) {
			refreshBtn.addEventListener('click', function() {
				// Always fetch fresh data from the backend
				refreshMedia();
			});
		}
	}

	function showFallbackGrid() {
		// Show the original static grid if the optimized version fails
		const container = document.getElementById('media-grid-container');
		const loading = document.getElementById('dashboard-loading');
		if (container) container.style.display = 'none';
		if (loading) loading.style.display = 'none';

		// Show any existing static grid
		const staticGrid = document.getElementById('static-media-grid');
		if (staticGrid) staticGrid.style.display = 'grid';
	}

	function initializeMediaRequests() {
		// Simple event delegation for all request buttons
		document.addEventListener('click', function(e) {
			// Find the button (handle clicks on button or child elements like SVG)
			let button = e.target.closest('button[data-media-id]');

			if (button && !button.disabled) {
				e.preventDefault();
				e.stopPropagation();

				const mediaId = button.getAttribute('data-media-id');
				if (mediaId) {
					requestKeepMedia(mediaId, button);
				}
			}
		});
	}

	function requestKeepMedia(mediaId, button) {
		if (!mediaId || button.disabled) return;

		const buttonId = button.id;
		const originalContent = window.setButtonLoading(buttonId, 'Submitting...');
		if (!originalContent) return;

		window.makeApiRequestEnhanced('/api/media/' + mediaId + '/request-keep', {
			method: 'POST',
			showProgress: true,
			onProgress: function(status, error) {
				if (status === 'error') {
					console.error('API Error:', error);
					window.showToast('Failed to submit request: ' + error.message, 'error');
					window.restoreButton(buttonId, originalContent);
				}
			}
		})
		.then(data => {
			if (data.success) {
				window.setButtonSuccess(buttonId, 'Request Submitted', '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>');

				// Update button styling
				button.classList.remove('btn-primary');
				button.classList.add('btn-secondary', 'opacity-50', 'cursor-not-allowed');

				window.showToast('Request submitted successfully', 'success');
			} else {
				throw new Error(data.message || 'Unknown error');
			}
		})
		.catch(error => {
			console.error('Error:', error);
			window.showToast('Failed to submit request: ' + error.message, 'error');
			window.restoreButton(buttonId, originalContent);
		});
	}

	function refreshMedia() {
		const buttonId = 'refresh-btn';
		const originalContent = window.setButtonLoading(buttonId, 'Refreshing...');
		if (!originalContent) return;

		// Use the consistent API approach - /api/media with refresh=true parameter
		window.makeApiRequestEnhanced('/api/media?refresh=true', {
			method: 'GET',
			showProgress: true,
			onProgress: function(status, error) {
				if (status === 'error') {
					console.error('Refresh Error:', error);
					window.showToast('Failed to refresh data: ' + error.message, 'error');
					window.restoreButton(buttonId, originalContent);
				}
			}
		})
		.then(data => {
			if (data.success) {
				const hasItemsNow = data.mediaItems && data.mediaItems.length > 0;
				const hadItemsBefore = window.dashboardMediaGridManager && window.dashboardMediaGridManager.getItems && window.dashboardMediaGridManager.getItems().length > 0;

				// If we're transitioning from empty to having items, or vice versa, reload the page
				if (hasItemsNow !== hadItemsBefore) {
					window.showToast('Data refreshed successfully - reloading page', 'success');
					setTimeout(() => {
						window.location.reload();
					}, 1000);
					return;
				}

				// Update the grid with new data
				if (window.dashboardMediaGridManager) {
					const clientItems = data.mediaItems.map(item => ({
						...item,
						// Ensure proper data format for client-side handling
						id: item.ID || item.id,
						title: item.Title || item.title,
						library: item.Library || item.library,
						posterURL: item.PosterURL || item.posterURL,
						fileSize: parseInt(item.FileSize || item.fileSize || 0),
						deletionTimestamp: item.DeletionDate ? new Date(item.DeletionDate).getTime() : 0,
						hasRequested: item.HasRequested || item.hasRequested,
						canRequest: item.CanRequest || item.canRequest,
						mustDelete: item.MustDelete || item.mustDelete,
						cleanupMode: item.CleanupMode || item.cleanupMode,
						keepCount: parseInt(item.KeepCount || item.keepCount || 0),
						type: item.Type || item.type,
						year: parseInt(item.Year || item.year || 0)
					}));

					window.dashboardMediaGridManager.setItems(clientItems);
					window.dashboardMediaGridManager.refresh();
				}

				window.showToast('Data refreshed successfully', 'success');
				window.restoreButton(buttonId, originalContent);
			} else {
				throw new Error(data.message || 'Failed to get refreshed data');
			}
		})
		.catch(error => {
			console.error('Error:', error);
			window.showToast('Failed to refresh data: ' + error.message, 'error');
			window.restoreButton(buttonId, originalContent);
		});
	}
}

templ OverviewTab(mediaItems []models.MediaItem) {
	<!-- Media Grid -->
	if len(mediaItems) == 0 {
		@EmptyState()
	} else {
		<!-- Show loading spinner initially -->
		<div id="dashboard-loading" class="hidden">
			@components.LoadingSpinnerLarge()
		</div>
		<!-- Optimized Media Grid -->
		@components.DashboardMediaGrid(mediaItems, 14)
		<!-- Pass data to JavaScript -->
		@templ.JSONScript("media-items-data", mediaItems)
	}
}
