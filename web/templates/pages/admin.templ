package pages

import (
	"github.com/jon4hz/jellysweep/api/models"
	"github.com/jon4hz/jellysweep/web/templates"
	"github.com/jon4hz/jellysweep/web/templates/components"
)

templ AdminPanel(user *models.User, keepRequests []models.KeepRequest, mediaItems []models.MediaItem) {
	@templates.LayoutWithPendingRequests("Admin Panel", user, len(keepRequests)) {
		<div class="space-y-6">
			<!-- Header -->
			<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
				<div>
					<h1 class="text-3xl font-bold text-gray-100">Admin Panel</h1>
					<p class="mt-1 text-sm text-gray-400">
						Manage keep requests and media content
					</p>
				</div>
				<div class="mt-4 sm:mt-0">
					<span class="inline-flex items-center px-3 py-1 rounded-full text-xs font-medium bg-blue-900 text-blue-200">
						{ len(keepRequests) } pending requests
					</span>
				</div>
			</div>
			@AdminTabs(keepRequests, mediaItems)
		</div>
		<!-- Include shared utility scripts -->
		@templates.ToastScript()
		@templates.ButtonLoadingUtils()
		@templates.ApiUtils()
		@templates.SmoothNavigationUtils()
		<!-- Include tab functionality -->
		@components.TabsScript()
		<!-- Include grid functionality -->
		@components.MediaGridScript()
		@components.AdminKeepRequestGridScript()
		@components.AdminMediaGridScript()
		<!-- Include admin utility functions -->
		@AdminUtilityScripts()
		<script>
			document.addEventListener('DOMContentLoaded', function() {
				initializeTabs('admin-tabs');
				initializeAdminGrids();
			});

			function initializeAdminGrids() {
				// Admin grids are now initialized automatically by their components
				// Just set up refresh handlers
				setupRefreshHandlers();
			}

			function setupRefreshHandlers() {
				// Setup refresh button handlers
				document.addEventListener('click', function(event) {
					if (event.target.id === 'request-refresh-btn' || event.target.closest('#request-refresh-btn')) {
						refreshApprovalQueue();
					} else if (event.target.id === 'media-refresh-btn' || event.target.closest('#media-refresh-btn')) {
						refreshKeepSweepMedia();
					}
				});
			}
		</script>
	}
}

templ AdminTabs(keepRequests []models.KeepRequest, mediaItems []models.MediaItem) {
	@components.TabContainer("admin-tabs") {
		@components.TabButton("approval-queue", "Approval Queue", `<svg class="w-4 h-4 mr-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>`, true)
		@components.TabButton("keep-sweep", "Keep or Sweep", `<svg class="w-4 h-4 mr-2.5" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 011 1v2a1 1 0 01-1 1h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8H3a1 1 0 01-1-1V5a1 1 0 011-1h3z"></path></svg>`, false)
	}
	@components.TabContentContainer() {
		@components.TabContent("approval-queue", true) {
			@ApprovalQueueTab(keepRequests)
		}
		@components.TabContent("keep-sweep", false) {
			@KeepSweepTab(mediaItems)
		}
	}
}

templ ApprovalQueueTab(keepRequests []models.KeepRequest) {
	if len(keepRequests) == 0 {
		@AdminEmptyState()
	} else {
		@components.AdminKeepRequestGrid(keepRequests)
		<!-- Pass data to JavaScript -->
		@templ.JSONScript("keep-requests-data", keepRequests)
	}
}

templ KeepSweepTab(mediaItems []models.MediaItem) {
	if len(mediaItems) == 0 {
		@KeepSweepEmptyState()
	} else {
		@components.AdminMediaGrid(mediaItems)
		<!-- Pass data to JavaScript -->
		@templ.JSONScript("media-items-data", mediaItems)
	}
}

templ AdminEmptyState() {
	<div class="text-center py-12">
		<div class="mx-auto w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mb-6">
			<svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
		</div>
		<h3 class="text-xl font-semibold text-gray-300 mb-2">No pending keep requests</h3>
		<p class="text-gray-500 mb-6">
			All keep requests have been processed. Check back later for new requests.
		</p>
		<button
			id="request-refresh-btn"
			class="inline-flex items-center px-4 py-2 border border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
		>
			<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
			</svg>
			Refresh
		</button>
	</div>
}

templ KeepSweepEmptyState() {
	<div class="text-center py-12">
		<div class="mx-auto w-24 h-24 bg-gray-800 rounded-full flex items-center justify-center mb-6">
			<svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
			</svg>
		</div>
		<h3 class="text-xl font-semibold text-gray-300 mb-2">No media available for review</h3>
		<p class="text-gray-500 mb-6">
			All media has been reviewed or there are no items available for keep/delete decisions.
		</p>
		<button
			id="media-refresh-btn"
			class="inline-flex items-center px-4 py-2 border border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
		>
			<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
			</svg>
			Refresh
		</button>
	</div>
}

templ AdminUtilityScripts() {
	<script>
		// Define all admin action functions and expose them globally
		window.acceptKeepRequest = function(mediaID) {
			const buttonId = 'accept-' + mediaID;
			const originalContent = window.setButtonLoading(buttonId, 'Processing...');
			if (!originalContent) return Promise.reject(new Error('Button not found'));

			return window.makeApiRequestEnhanced('/admin/api/keep-requests/' + mediaID + '/accept', {
				method: 'POST',
				showProgress: true,
				onProgress: function(status, error) {
					if (status === 'error') {
						console.error('Accept Error:', error);
						window.showToast('Failed to accept request: ' + error.message, 'error');
						window.restoreButton(buttonId, originalContent);
					}
				}
			})
			.then(data => {
				if (data.success) {
					window.setButtonSuccess(buttonId, 'Accepted', '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>');
					updatePendingCount(-1);
					window.showToast('Keep request accepted successfully', 'success');
					return data;
				} else {
					throw new Error(data.error || 'Unknown error');
				}
			})
			.catch(error => {
				console.error('Error:', error);
				window.showToast('Failed to accept request: ' + error.message, 'error');
				window.restoreButton(buttonId, originalContent);
				throw error;
			});
		};

		window.declineKeepRequest = function(mediaID) {
			const buttonId = 'decline-' + mediaID;
			const originalContent = window.setButtonLoading(buttonId, 'Processing...');
			if (!originalContent) return Promise.reject(new Error('Button not found'));

			return window.makeApiRequestEnhanced('/admin/api/keep-requests/' + mediaID + '/decline', {
				method: 'POST',
				showProgress: true,
				onProgress: function(status, error) {
					if (status === 'error') {
						console.error('Decline Error:', error);
						window.showToast('Failed to decline request: ' + error.message, 'error');
						window.restoreButton(buttonId, originalContent);
					}
				}
			})
			.then(data => {
				if (data.success) {
					window.setButtonSuccess(buttonId, 'Declined', '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>');
					updatePendingCount(-1);
					window.showToast('Keep request declined successfully', 'success');
					return data;
				} else {
					throw new Error(data.error || 'Unknown error');
				}
			})
			.catch(error => {
				console.error('Error:', error);
				window.showToast('Failed to decline request: ' + error.message, 'error');
				window.restoreButton(buttonId, originalContent);
				throw error;
			});
		};

		window.markAsKeep = function(mediaID) {
			const buttonId = 'keep-' + mediaID;
			const originalContent = window.setButtonLoading(buttonId, 'Processing...');
			if (!originalContent) return Promise.reject(new Error('Button not found'));

			return window.makeApiRequestEnhanced('/admin/api/media/' + mediaID + '/keep', {
				method: 'POST',
				showProgress: true,
				onProgress: function(status, error) {
					if (status === 'error') {
						console.error('Keep Error:', error);
						window.showToast('Failed to mark as keep: ' + error.message, 'error');
						window.restoreButton(buttonId, originalContent);
					}
				}
			})
			.then(data => {
				if (data.success) {
					window.setButtonSuccess(buttonId, 'Kept', '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>');
					window.showToast('Media marked as keep successfully', 'success');
					return data;
				} else {
					throw new Error(data.error || 'Unknown error');
				}
			})
			.catch(error => {
				console.error('Error:', error);
				window.showToast('Failed to mark as keep: ' + error.message, 'error');
				window.restoreButton(buttonId, originalContent);
				throw error;
			});
		};

		window.markAsDelete = function(mediaID) {
			const buttonId = 'delete-' + mediaID;
			const originalContent = window.setButtonLoading(buttonId, 'Processing...');
			if (!originalContent) return Promise.reject(new Error('Button not found'));

			return window.makeApiRequestEnhanced('/admin/api/media/' + mediaID + '/delete', {
				method: 'POST',
				showProgress: true,
				onProgress: function(status, error) {
					if (status === 'error') {
						console.error('Delete Error:', error);
						window.showToast('Failed to mark for deletion: ' + error.message, 'error');
						window.restoreButton(buttonId, originalContent);
					}
				}
			})
			.then(data => {
				if (data.success) {
					window.setButtonSuccess(buttonId, 'Deleted', '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>');
					window.showToast('Media marked for deletion successfully', 'success');
					return data;
				} else {
					throw new Error(data.error || 'Unknown error');
				}
			})
			.catch(error => {
				console.error('Error:', error);
				window.showToast('Failed to mark for deletion: ' + error.message, 'error');
				window.restoreButton(buttonId, originalContent);
				throw error;
			});
		};

		window.markAsKeepForever = function(mediaID) {
			const buttonId = 'keep-forever-' + mediaID;
			const originalContent = window.setButtonLoading(buttonId, 'Processing...');
			if (!originalContent) return Promise.reject(new Error('Button not found'));

			return window.makeApiRequest('/admin/api/media/' + mediaID + '/keep-forever')
			.then(data => {
				if (data.success) {
					window.setButtonSuccess(buttonId, 'Protected', '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>');
					window.showToast('Media protected forever successfully', 'success');
					return data;
				} else {
					throw new Error(data.error || 'Unknown error');
				}
			})
			.catch(error => {
				console.error('Error:', error);
				window.showToast('Failed to protect media: ' + error.message, 'error');
				window.restoreButton(buttonId, originalContent);
				throw error;
			});
		};

		// Utility functions
		function refreshApprovalQueue() {
			const buttonId = 'request-refresh-btn';
			const originalContent = window.setButtonLoading(buttonId, 'Refreshing...');
			if (!originalContent) return;

			// Use the consistent API approach - /admin/api/keep-requests to get fresh data
			window.makeApiRequestEnhanced('/admin/api/keep-requests', {
				method: 'GET',
				showProgress: true,
				onProgress: function(status, error) {
					if (status === 'error') {
						console.error('Queue Refresh Error:', error);
						window.showToast('Failed to refresh queue: ' + error.message, 'error');
						window.restoreButton(buttonId, originalContent);
					}
				}
			})
			.then(data => {
				if (data.success) {
					const hasItemsNow = data.keepRequests && data.keepRequests.length > 0;
					const hadItemsBefore = window.adminKeepRequestGridManager && window.adminKeepRequestGridManager.getItems && window.adminKeepRequestGridManager.getItems().length > 0;

					// If we're transitioning from empty to having items, or vice versa, reload the page
					if (hasItemsNow !== hadItemsBefore) {
						window.showToast('Queue refreshed successfully - reloading page', 'success');
						setTimeout(() => {
							window.location.reload();
						}, 1000);
						return;
					}

					// Update the grid with new data
					if (window.adminKeepRequestGridManager && window.adminKeepRequestGridManager.setItems) {
						window.adminKeepRequestGridManager.setItems(data.keepRequests);
						window.adminKeepRequestGridManager.refresh();
					}

					window.showToast('Queue refreshed successfully', 'success');
					window.restoreButton(buttonId, originalContent);
				} else {
					throw new Error(data.message || 'Failed to refresh queue');
				}
			})
			.catch(error => {
				console.error('Error:', error);
				window.showToast('Failed to refresh queue: ' + error.message, 'error');
				window.restoreButton(buttonId, originalContent);
			});
		}

		function refreshKeepSweepMedia() {
			const buttonId = 'media-refresh-btn';
			const originalContent = window.setButtonLoading(buttonId, 'Refreshing...');
			if (!originalContent) return;

			// Use the consistent API approach - /admin/api/media with refresh=true parameter
			window.makeApiRequestEnhanced('/admin/api/media?refresh=true', {
				method: 'GET',
				showProgress: true,
				onProgress: function(status, error) {
					if (status === 'error') {
						console.error('Media Refresh Error:', error);
						window.showToast('Failed to refresh media: ' + error.message, 'error');
						window.restoreButton(buttonId, originalContent);
					}
				}
			})
			.then(data => {
				if (data.success) {
					const hasItemsNow = data.mediaItems && data.mediaItems.length > 0;
					const hadItemsBefore = window.adminMediaGridManager && window.adminMediaGridManager.getItems && window.adminMediaGridManager.getItems().length > 0;

					// If we're transitioning from empty to having items, or vice versa, reload the page
					if (hasItemsNow !== hadItemsBefore) {
						window.showToast('Media refreshed successfully - reloading page', 'success');
						setTimeout(() => {
							window.location.reload();
						}, 1000);
						return;
					}

					// Update the grid with new data
					if (window.adminMediaGridManager && window.adminMediaGridManager.setItems) {
						window.adminMediaGridManager.setItems(data.mediaItems);
						window.adminMediaGridManager.refresh();
					}

					window.showToast('Media refreshed successfully', 'success');
					window.restoreButton(buttonId, originalContent);
				} else {
					throw new Error(data.message || 'Failed to refresh media');
				}
			})
			.catch(error => {
				console.error('Error:', error);
				window.showToast('Failed to refresh media: ' + error.message, 'error');
				window.restoreButton(buttonId, originalContent);
			});
		}

		function updatePendingCount(delta) {
			const badge = document.querySelector('.bg-blue-900.text-blue-200');
			if (badge) {
				const currentText = badge.textContent.trim();
				const currentCount = parseInt(currentText.match(/\d+/)[0]);
				const newCount = Math.max(0, currentCount + delta);
				badge.textContent = newCount + ' pending requests';
			}
		}

		function animateCardRemoval(cardElement, direction = 'right') {
			if (!cardElement) return Promise.resolve();

			return new Promise((resolve) => {
				const translateX = direction === 'right' ? '20px' : '-20px';
				cardElement.style.transition = 'opacity 0.3s ease-out, transform 0.3s ease-out';
				cardElement.style.opacity = '0';
				cardElement.style.transform = `translateX(${translateX})`;

				setTimeout(() => {
					cardElement.remove();
					resolve();
				}, 300);
			});
		}

		// Legacy function for backward compatibility (not used by grid managers)
		function removeCardFromGrid(cardId) {
			const card = document.getElementById(cardId);
			if (card) {
				// Fallback to simple animation for any legacy calls
				animateCardRemoval(card);
			}
		}

		// Expose utility functions globally if needed
		window.refreshApprovalQueue = refreshApprovalQueue;
		window.refreshKeepSweepMedia = refreshKeepSweepMedia;
		window.updatePendingCount = updatePendingCount;
		window.removeCardFromGrid = removeCardFromGrid;
	</script>
}
