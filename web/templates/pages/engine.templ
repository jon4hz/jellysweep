package pages

import (
	"fmt"
	"github.com/dustin/go-humanize"
	"github.com/jon4hz/jellysweep/api/models"
	"github.com/jon4hz/jellysweep/cache"
	"github.com/jon4hz/jellysweep/database"
	"github.com/jon4hz/jellysweep/scheduler"
	"github.com/jon4hz/jellysweep/web/templates"
	"sort"
)

templ EnginePanel(user *models.User, jobs map[string]*scheduler.JobInfo, cacheStats []*cache.Stats, dbStats *database.CleanupStats, cleanupHistory []database.CleanupRunSummary, activeRun *database.CleanupRun) {
	@templates.Layout("Engine", user) {
		<div class="space-y-6">
			<!-- Header -->
			<div class="flex flex-col sm:flex-row sm:items-center sm:justify-between">
				<div>
					<h1 class="text-3xl font-bold text-gray-100">Engine Management</h1>
					<p class="mt-1 text-sm text-gray-400">
						Manage scheduled jobs, cache, and database operations
					</p>
				</div>
				<div class="mt-4 sm:mt-0 flex space-x-3">
					<button
						id="refresh-jobs-btn"
						class="inline-flex items-center px-4 py-2 border border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-300 bg-gray-700 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors duration-200"
					>
						<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
						</svg>
						Refresh
					</button>
					if len(cacheStats) > 0 {
						<button
							id="clear-cache-btn"
							class="inline-flex items-center px-4 py-2 border border-red-600 rounded-md shadow-sm text-sm font-medium text-red-300 bg-red-700/20 hover:bg-red-700/30 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors duration-200"
						>
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
							</svg>
							Clear Cache
						</button>
					} else {
						<button
							id="clear-cache-btn"
							disabled
							title="Cache is disabled"
							class="inline-flex items-center px-4 py-2 border border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-500 bg-gray-800 cursor-not-allowed opacity-50"
						>
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728A9 9 0 715.636 5.636"></path>
							</svg>
							Cache Disabled
						</button>
					}
				</div>
			</div>
			<!-- Database Stats Section -->
			@DatabaseStatsCard(dbStats, activeRun)
			<!-- Cache Stats -->
			@CacheStatsCard(cacheStats)
			<!-- Jobs List -->
			@JobsCard(jobs)
			<!-- Cleanup History -->
			@CleanupHistoryCard(cleanupHistory)
		</div>
		<!-- Include shared utility scripts -->
		@templates.ToastScript()
		@templates.ButtonLoadingUtils()
		@templates.ApiUtils()
		@templates.SmoothNavigationUtils()
		<!-- Include engine-specific scripts -->
		@EngineScript()
	}
}

templ DatabaseStatsCard(dbStats *database.CleanupStats, activeRun *database.CleanupRun) {
	<div class="bg-gray-800 rounded-lg border border-gray-700 p-6">
		<div class="flex items-center justify-between mb-4">
			<h2 class="text-xl font-semibold text-gray-100">Database & Cleanup Status</h2>
			<div class="flex items-center space-x-2">
				if activeRun != nil {
					<div class="w-2 h-2 bg-blue-500 rounded-full animate-pulse"></div>
					<span class="text-sm text-blue-400">Cleanup Running</span>
				} else {
					<div class="w-2 h-2 bg-green-500 rounded-full"></div>
					<span class="text-sm text-gray-400">Ready</span>
				}
			</div>
		</div>
		<!-- Active Run Status -->
		if activeRun != nil {
			<div class="bg-blue-900/20 border border-blue-700 rounded-lg p-4 mb-6">
				<h3 class="text-lg font-medium text-blue-200 mb-2">Active Cleanup Run</h3>
				<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
					<div>
						<p class="text-sm text-gray-400">Run ID</p>
						<p class="text-lg font-semibold text-blue-200">{ fmt.Sprintf("#%d", activeRun.ID) }</p>
					</div>
					<div>
						<p class="text-sm text-gray-400">Started At</p>
						<p class="text-lg font-semibold text-blue-200">{ activeRun.StartedAt.Format("15:04:05") }</p>
					</div>
					<div>
						<p class="text-sm text-gray-400">Current Step</p>
						<p class="text-lg font-semibold text-blue-200">{ formatCleanupStep(string(activeRun.Step)) }</p>
					</div>
				</div>
			</div>
		}
		<!-- Database Statistics -->
		if dbStats != nil {
			@DatabaseStatsEnabled(dbStats)
		} else {
			@DatabaseStatsError()
		}
	</div>
}

templ DatabaseStatsEnabled(dbStats *database.CleanupStats) {
	<!-- Summary Stats -->
	<div class="grid grid-cols-1 md:grid-cols-4 gap-6">
		<div class="text-center">
			<div class="flex items-center justify-center mb-2">
				<svg class="w-6 h-6 text-blue-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
				</svg>
				<p class="text-3xl font-bold text-blue-400">
					{ fmt.Sprintf("%d", dbStats.TotalRuns) }
				</p>
			</div>
			<p class="text-sm text-gray-400">Total Runs</p>
		</div>
		<div class="text-center">
			<div class="flex items-center justify-center mb-2">
				<svg class="w-6 h-6 text-green-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				<p class="text-3xl font-bold text-green-400">
					{ fmt.Sprintf("%d", dbStats.SuccessfulRuns) }
				</p>
			</div>
			<p class="text-sm text-gray-400">Successful</p>
		</div>
		<div class="text-center">
			<div class="flex items-center justify-center mb-2">
				<svg class="w-6 h-6 text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
				</svg>
				<p class="text-3xl font-bold text-red-400">
					{ fmt.Sprintf("%d", dbStats.TotalItemsDeleted) }
				</p>
			</div>
			<p class="text-sm text-gray-400">Items Deleted</p>
		</div>
		<div class="text-center">
			<div class="flex items-center justify-center mb-2">
				<svg class="w-6 h-6 text-yellow-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4"></path>
				</svg>
				<p class="text-3xl font-bold text-yellow-400">
					{ formatBytes(dbStats.TotalSizeDeleted) }
				</p>
			</div>
			<p class="text-sm text-gray-400">Space Freed</p>
		</div>
	</div>
	<!-- Additional Stats Row -->
	if dbStats.AverageRunDuration != nil || dbStats.LastSuccessfulRun != nil {
		<div class="grid grid-cols-1 md:grid-cols-2 gap-6 mt-4 pt-4 border-t border-gray-700">
			if dbStats.AverageRunDuration != nil {
				<div class="text-center">
					<p class="text-sm text-gray-400">Average Run Duration</p>
					<p class="text-lg font-semibold text-gray-200">{ *dbStats.AverageRunDuration }</p>
				</div>
			}
			if dbStats.LastSuccessfulRun != nil {
				<div class="text-center">
					<p class="text-sm text-gray-400">Last Successful Run</p>
					<p class="text-lg font-semibold text-gray-200">{ dbStats.LastSuccessfulRun.Format("2006-01-02 15:04") }</p>
				</div>
			}
		</div>
	}
}

templ DatabaseStatsError() {
	<div class="text-center py-8">
		<div class="mx-auto w-16 h-16 bg-red-900 rounded-full flex items-center justify-center mb-4">
			<svg class="w-8 h-8 text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
		</div>
		<h3 class="text-lg font-semibold text-red-300 mb-2">Database Error</h3>
		<p class="text-gray-400">
			Unable to retrieve database statistics. The database may be unavailable.
		</p>
	</div>
}

templ CleanupHistoryCard(cleanupHistory []database.CleanupRunSummary) {
	<div class="bg-gray-800 rounded-lg border border-gray-700">
		<div class="p-6 border-b border-gray-700">
			<h2 class="text-xl font-semibold text-gray-100">Recent Cleanup History</h2>
			<p class="text-sm text-gray-400 mt-1">
				Latest cleanup runs and their results
			</p>
		</div>
		<div class="p-0">
			if len(cleanupHistory) == 0 {
				@CleanupHistoryEmptyState()
			} else {
				@CleanupHistoryTable(cleanupHistory)
			}
		</div>
	</div>
}

templ CleanupHistoryEmptyState() {
	<div class="text-center py-12">
		<div class="mx-auto w-24 h-24 bg-gray-900 rounded-full flex items-center justify-center mb-6">
			<svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"></path>
			</svg>
		</div>
		<h3 class="text-xl font-semibold text-gray-300 mb-2">No cleanup history</h3>
		<p class="text-gray-500">
			No cleanup runs have been recorded yet. History will appear here after the first cleanup job runs.
		</p>
	</div>
}

templ CleanupHistoryTable(cleanupHistory []database.CleanupRunSummary) {
	<div class="overflow-x-auto">
		<table class="w-full">
			<thead class="bg-gray-900">
				<tr>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Run ID</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Started</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Duration</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Items</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Deleted</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Size Freed</th>
				</tr>
			</thead>
			<tbody class="divide-y divide-gray-700">
				for _, run := range cleanupHistory {
					@CleanupHistoryRow(run)
				}
			</tbody>
		</table>
	</div>
}

templ CleanupHistoryRow(run database.CleanupRunSummary) {
	<tr class="hover:bg-gray-750">
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm font-medium text-gray-100">
				{ fmt.Sprintf("#%d", run.ID) }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			@CleanupRunStatusBadge(run.Status)
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				{ run.StartedAt.Format("2006-01-02 15:04") }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				if run.Duration != nil {
					{ *run.Duration }
				} else {
					<span class="text-gray-500">-</span>
				}
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				{ fmt.Sprintf("%d", run.TotalItems) }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-green-400">
				{ fmt.Sprintf("%d", run.Deleted) }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-purple-400">
				{ formatBytes(run.DeletedSize) }
			</div>
		</td>
	</tr>
}

templ CleanupRunStatusBadge(status database.CleanupRunStatus) {
	switch status {
		case database.CleanupRunStatusRunning:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-900 text-blue-200">
				<svg class="w-3 h-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
				</svg>
				Running
			</span>
		case database.CleanupRunStatusCompleted:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				Completed
			</span>
		case database.CleanupRunStatusFailed:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
				Failed
			</span>
		case database.CleanupRunStatusCancelled:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-yellow-900 text-yellow-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				Cancelled
			</span>
		default:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-900 text-gray-200">
				Unknown
			</span>
	}
}

templ CacheStatsCard(cacheStats []*cache.Stats) {
	<div class="bg-gray-800 rounded-lg border border-gray-700 p-6">
		<div class="flex items-center justify-between mb-4">
			<h2 class="text-xl font-semibold text-gray-100">Cache Status</h2>
			<div class="flex items-center space-x-2">
				if len(cacheStats) > 0 {
					<div class="w-2 h-2 bg-green-500 rounded-full"></div>
					<span class="text-sm text-gray-400">Enabled</span>
				} else {
					<div class="w-2 h-2 bg-gray-500 rounded-full"></div>
					<span class="text-sm text-gray-400">Disabled</span>
				}
			</div>
		</div>
		if len(cacheStats) > 0 {
			@CacheStatsEnabled(cacheStats)
		} else {
			@CacheStatsDisabled()
		}
	</div>
}

templ JobsCard(jobs map[string]*scheduler.JobInfo) {
	<div class="bg-gray-800 rounded-lg border border-gray-700">
		<div class="p-6 border-b border-gray-700">
			<h2 class="text-xl font-semibold text-gray-100">Scheduled Jobs</h2>
			<p class="text-sm text-gray-400 mt-1">
				{ fmt.Sprintf("%d jobs configured", len(jobs)) }
			</p>
		</div>
		<div class="p-0">
			if len(jobs) == 0 {
				@JobsEmptyState()
			} else {
				@JobsTable(jobs)
			}
		</div>
	</div>
}

templ JobsEmptyState() {
	<div class="text-center py-12">
		<div class="mx-auto w-24 h-24 bg-gray-900 rounded-full flex items-center justify-center mb-6">
			<svg class="w-12 h-12 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
			</svg>
		</div>
		<h3 class="text-xl font-semibold text-gray-300 mb-2">No scheduled jobs</h3>
		<p class="text-gray-500">
			No jobs have been configured yet. Jobs will appear here once the scheduler is set up.
		</p>
	</div>
}

templ JobsTable(jobs map[string]*scheduler.JobInfo) {
	<div class="overflow-x-auto">
		<table class="w-full">
			<thead class="bg-gray-900">
				<tr>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Job</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Schedule</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Last Run</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Next Run</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Stats</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Actions</th>
				</tr>
			</thead>
			<tbody class="divide-y divide-gray-700">
				for _, job := range sortJobsByName(jobs) {
					@JobRow(job)
				}
			</tbody>
		</table>
	</div>
}

templ JobRow(job *scheduler.JobInfo) {
	<tr class="hover:bg-gray-750">
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					if job.Enabled {
						<div class="w-2 h-2 bg-green-500 rounded-full"></div>
					} else {
						<div class="w-2 h-2 bg-gray-500 rounded-full"></div>
					}
				</div>
				<div class="ml-4">
					<div class="text-sm font-medium text-gray-100">{ job.Name }</div>
					<div class="text-sm text-gray-400">
						{ job.Description }
					</div>
				</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			@JobStatusBadge(job.Status)
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">{ job.Schedule }</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				if !job.LastRun.IsZero() {
					{ job.LastRun.Format("2006-01-02 15:04:05") }
				} else {
					<span class="text-gray-500">Never</span>
				}
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				if !job.NextRun.IsZero() {
					{ job.NextRun.Format("2006-01-02 15:04:05") }
				} else {
					<span class="text-gray-500">-</span>
				}
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-300">
				<div>Runs: { fmt.Sprintf("%d", job.RunCount) }</div>
				<div class="text-red-400">Errors: { fmt.Sprintf("%d", job.ErrorCount) }</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
			<div class="flex items-center space-x-2">
				if job.Singleton && job.Status == scheduler.JobStatusRunning {
					<button
						class="text-gray-500 cursor-not-allowed"
						disabled
						title="Singleton job is already running"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</button>
				} else {
					<button
						class="run-job-btn text-blue-400 hover:text-blue-300"
						data-job-id={ job.ID }
						title="Run Now"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</button>
				}
				if job.Enabled {
					<button
						class="disable-job-btn text-yellow-400 hover:text-yellow-300"
						data-job-id={ job.ID }
						title="Disable"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 9v6m4-6v6m7-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</button>
				} else {
					<button
						class="enable-job-btn text-green-400 hover:text-green-300"
						data-job-id={ job.ID }
						title="Enable"
					>
						<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1m4 0h1m-6 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</button>
				}
			</div>
		</td>
	</tr>
}

templ JobStatusBadge(status scheduler.JobStatus) {
	switch status {
		case scheduler.JobStatusRunning:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-900 text-blue-200">
				<svg class="w-3 h-3 mr-1 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
				</svg>
				Running
			</span>
		case scheduler.JobStatusCompleted:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				Completed
			</span>
		case scheduler.JobStatusFailed:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-900 text-red-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
				Failed
			</span>
		case scheduler.JobStatusScheduled:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-900 text-gray-200">
				<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
				</svg>
				Scheduled
			</span>
		default:
			<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-900 text-gray-200">
				Unknown
			</span>
	}
}

func sortJobsByName(jobs map[string]*scheduler.JobInfo) []*scheduler.JobInfo {
	jobList := make([]*scheduler.JobInfo, 0, len(jobs))
	for _, job := range jobs {
		jobList = append(jobList, job)
	}
	sort.Slice(jobList, func(i, j int) bool {
		return jobList[i].Name < jobList[j].Name
	})
	return jobList
}

templ EngineScript() {
	<script>
		document.addEventListener('DOMContentLoaded', function() {
			// Refresh jobs handler
			const refreshBtn = document.getElementById('refresh-jobs-btn');
			if (refreshBtn) {
				refreshBtn.addEventListener('click', function() {
					location.reload();
				});
			}

			// Clear cache handler
			const clearCacheBtn = document.getElementById('clear-cache-btn');
			if (clearCacheBtn && !clearCacheBtn.disabled) {
				clearCacheBtn.addEventListener('click', function() {
					clearCache();
				});
			}

			// Job action handlers
			document.querySelectorAll('.run-job-btn').forEach(btn => {
				btn.addEventListener('click', function() {
					const jobId = this.dataset.jobId;
					runJob(jobId);
				});
			});

			document.querySelectorAll('.enable-job-btn').forEach(btn => {
				btn.addEventListener('click', function() {
					const jobId = this.dataset.jobId;
					enableJob(jobId);
				});
			});

			document.querySelectorAll('.disable-job-btn').forEach(btn => {
				btn.addEventListener('click', function() {
					const jobId = this.dataset.jobId;
					disableJob(jobId);
				});
			});
		});

		async function runJob(jobId) {
			try {
				const response = await fetch(`/admin/api/engine/jobs/${jobId}/run`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				const result = await response.json();
				if (result.success) {
					showToast('Job triggered successfully', 'success');
					// Refresh the page after a short delay to see updated status
					setTimeout(() => location.reload(), 1000);
				} else {
					showToast(result.error || 'Failed to trigger job', 'error');
				}
			} catch (error) {
				showToast('Error triggering job', 'error');
				console.error('Error:', error);
			}
		}

		async function enableJob(jobId) {
			try {
				const response = await fetch(`/admin/api/engine/jobs/${jobId}/enable`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				const result = await response.json();
				if (result.success) {
					showToast('Job enabled successfully', 'success');
					location.reload();
				} else {
					showToast(result.error || 'Failed to enable job', 'error');
				}
			} catch (error) {
				showToast('Error enabling job', 'error');
				console.error('Error:', error);
			}
		}

		async function disableJob(jobId) {
			try {
				const response = await fetch(`/admin/api/engine/jobs/${jobId}/disable`, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				const result = await response.json();
				if (result.success) {
					showToast('Job disabled successfully', 'success');
					location.reload();
				} else {
					showToast(result.error || 'Failed to disable job', 'error');
				}
			} catch (error) {
				showToast('Error disabling job', 'error');
				console.error('Error:', error);
			}
		}

		async function clearCache() {
			try {
				const response = await fetch('/admin/api/engine/cache/clear', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
				});

				const result = await response.json();
				if (result.success) {
					showToast('Cache cleared successfully', 'success');
					setTimeout(() => location.reload(), 1000);
				} else {
					showToast(result.error || 'Failed to clear cache', 'error');
				}
			} catch (error) {
				showToast('Error clearing cache', 'error');
				console.error('Error:', error);
			}
		}
	</script>
}

// Helper functions for cache statistics
func formatCacheName(cacheName string) string {
	switch cacheName {
	case "sonarr-items":
		return "Sonarr Items"
	case "sonarr-tags":
		return "Sonarr Tags"
	case "radarr-items":
		return "Radarr Items"
	case "radarr-tags":
		return "Radarr Tags"
	default:
		return cacheName
	}
}

func calculateCacheHitRate(stats *cache.Stats) float64 {
	total := stats.Hits + stats.Miss
	if total == 0 {
		return 0.0
	}
	return float64(stats.Hits) / float64(total) * 100.0
}

func calculateTotalHits(caches []*cache.Stats) int {
	total := 0
	for _, cache := range caches {
		total += cache.Hits
	}
	return total
}

func calculateTotalMisses(caches []*cache.Stats) int {
	total := 0
	for _, cache := range caches {
		total += cache.Miss
	}
	return total
}

func calculateOverallHitRate(caches []*cache.Stats) float64 {
	totalHits := calculateTotalHits(caches)
	totalMisses := calculateTotalMisses(caches)
	total := totalHits + totalMisses

	if total == 0 {
		return 0.0
	}
	return float64(totalHits) / float64(total) * 100.0
}

templ CacheStatsEnabled(caches []*cache.Stats) {
	<!-- Summary Stats -->
	<div class="bg-gray-900 rounded-lg p-6 mb-6">
		<h3 class="text-lg font-medium text-gray-100">Overall Cache Performance</h3>
		<div class="grid grid-cols-1 md:grid-cols-4 gap-6">
			<div class="text-center">
				<div class="flex items-center justify-center mb-2">
					<svg class="w-6 h-6 text-purple-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
					</svg>
					<p class="text-3xl font-bold text-purple-400">
						{ fmt.Sprintf("%d", len(caches)) }
					</p>
				</div>
				<p class="text-sm text-gray-400">Active Caches</p>
			</div>
			<div class="text-center">
				<div class="flex items-center justify-center mb-2">
					<svg class="w-6 h-6 text-green-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
					<p class="text-3xl font-bold text-green-400">
						{ fmt.Sprintf("%d", calculateTotalHits(caches)) }
					</p>
				</div>
				<p class="text-sm text-gray-400">Total Hits</p>
			</div>
			<div class="text-center">
				<div class="flex items-center justify-center mb-2">
					<svg class="w-6 h-6 text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
					<p class="text-3xl font-bold text-red-400">
						{ fmt.Sprintf("%d", calculateTotalMisses(caches)) }
					</p>
				</div>
				<p class="text-sm text-gray-400">Total Misses</p>
			</div>
			<div class="text-center">
				<div class="flex items-center justify-center mb-2">
					<svg class="w-6 h-6 text-blue-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
					</svg>
					<p class="text-3xl font-bold text-blue-400">
						{ fmt.Sprintf("%.1f%%", calculateOverallHitRate(caches)) }
					</p>
				</div>
				<p class="text-sm text-gray-400">Overall Hit Rate</p>
			</div>
		</div>
	</div>
	<!-- Individual Cache Stats Table -->
	<div class="overflow-x-auto mb-4">
		<table class="w-full bg-gray-900 rounded-lg">
			<thead class="bg-gray-800">
				<tr>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Cache</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Status</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Hits</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Misses</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Hit Rate</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Total Requests</th>
				</tr>
			</thead>
			<tbody class="divide-y divide-gray-700">
				for _, cacheStats := range caches {
					<tr class="hover:bg-gray-800">
						<td class="px-6 py-4 whitespace-nowrap">
							<div class="flex items-center">
								<div class="w-2 h-2 bg-green-500 rounded-full mr-3"></div>
								<div class="text-sm font-medium text-gray-100">
									{ formatCacheName(cacheStats.CacheName) }
								</div>
							</div>
						</td>
						<td class="px-6 py-4 whitespace-nowrap">
							<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-900 text-green-200">
								<div class="w-2 h-2 bg-green-400 rounded-full mr-1"></div>
								Active
							</span>
						</td>
						<td class="px-6 py-4 whitespace-nowrap">
							<div class="text-sm font-medium text-green-400">
								{ fmt.Sprintf("%d", cacheStats.Hits) }
							</div>
						</td>
						<td class="px-6 py-4 whitespace-nowrap">
							<div class="text-sm font-medium text-red-400">
								{ fmt.Sprintf("%d", cacheStats.Miss) }
							</div>
						</td>
						<td class="px-6 py-4 whitespace-nowrap">
							<div class="flex items-center">
								<div class="text-sm font-medium text-blue-400">
									{ fmt.Sprintf("%.1f%%", calculateCacheHitRate(cacheStats)) }
								</div>
								<div class="ml-2 w-16 bg-gray-700 rounded-full h-1.5">
									<div class="bg-blue-500 h-1.5 rounded-full" style={ fmt.Sprintf("width: %.1f%%", calculateCacheHitRate(cacheStats)) }></div>
								</div>
							</div>
						</td>
						<td class="px-6 py-4 whitespace-nowrap">
							<div class="text-sm text-gray-300">
								{ fmt.Sprintf("%d", cacheStats.Hits + cacheStats.Miss) }
							</div>
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ CacheStatsDisabled() {
	<div class="grid grid-cols-1 md:grid-cols-3 gap-4">
		<div class="bg-gray-900 rounded-lg p-4">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					<svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4"></path>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm text-gray-400">Cache Items</p>
					<p class="text-2xl font-semibold text-gray-100">0</p>
					<p class="text-xs text-gray-500">Caching Disabled</p>
				</div>
			</div>
		</div>
		<div class="bg-gray-900 rounded-lg p-4">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					<svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm text-gray-400">Status</p>
					<p class="text-lg font-semibold text-gray-400">Disabled</p>
				</div>
			</div>
		</div>
		<div class="bg-gray-900 rounded-lg p-4">
			<div class="flex items-center">
				<div class="flex-shrink-0">
					<svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728A9 9 0 715.636 5.636"></path>
					</svg>
				</div>
				<div class="ml-4">
					<p class="text-sm text-gray-400">Cache Type</p>
					<p class="text-lg font-semibold text-gray-400">None</p>
				</div>
			</div>
		</div>
	</div>
}

// Helper functions for database display
func formatCleanupStep(step string) string {
	switch step {
	case "starting":
		return "Starting"
	case "remove_expired_keep_tags":
		return "Remove Expired Keep Tags"
	case "cleanup_old_tags":
		return "Cleanup Old Tags"
	case "mark_for_deletion":
		return "Mark for Deletion"
	case "remove_recently_played":
		return "Remove Recently Played"
	case "cleanup_media":
		return "Cleanup Media"
	case "completed":
		return "Completed"
	default:
		return step
	}
}

func formatBytes(bytes int64) string {
	return humanize.Bytes(uint64(bytes))
}
