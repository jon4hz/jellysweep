package templates

// Shared utility scripts for common functionality across templates
templ ToastScript() {
	<script>
		if (!window.showToast) {
			window.showToast = function(message, toastType = 'info') {
				// Remove existing toasts
				const existingToasts = document.querySelectorAll('.toast');
				existingToasts.forEach(toast => toast.remove());

				// Create new toast
				const toast = document.createElement('div');
				toast.className = 'toast fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transition-all duration-300';

				const typeClasses = {
					success: 'bg-green-900 border border-green-700 text-green-100',
					error: 'bg-red-900 border border-red-700 text-red-100',
					info: 'bg-blue-900 border border-blue-700 text-blue-100',
					warning: 'bg-yellow-900 border border-yellow-700 text-yellow-100'
				};

				toast.className += ' ' + (typeClasses[toastType] || typeClasses.info);

				const icons = {
					success: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>',
					error: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>',
					info: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>',
					warning: '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>'
				};

				toast.innerHTML = `
					<div class="flex items-center">
						<svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							${icons[toastType] || icons.info}
						</svg>
						<span>${message}</span>
						<button class="ml-4 text-current hover:opacity-70" onclick="this.parentElement.parentElement.remove()">
							<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
							</svg>
						</button>
					</div>
				`;

				document.body.appendChild(toast);

				// Auto-remove after 5 seconds
				setTimeout(() => {
					if (toast.parentElement) {
						toast.remove();
					}
				}, 5000);
			};
		}
	</script>
}

templ ButtonLoadingUtils() {
	<script>
		if (!window.setButtonLoading) {
			window.setButtonLoading = function(buttonId, loadingText = 'Loading...') {
				const button = document.getElementById(buttonId);
				if (!button || button.disabled) return null;

				// Disable button and store original content
				button.disabled = true;
				const originalContent = button.innerHTML;
				button.innerHTML = `
					<svg class="w-4 h-4 mr-2 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					${loadingText}
				`;

				return originalContent;
			};

			window.setButtonSuccess = function(buttonId, successText, iconPath) {
				const button = document.getElementById(buttonId);
				if (!button) return;

				button.innerHTML = `
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						${iconPath}
					</svg>
					${successText}
				`;
			};

			window.restoreButton = function(buttonId, originalContent) {
				const button = document.getElementById(buttonId);
				if (!button) return;

				button.disabled = false;
				button.innerHTML = originalContent;
			};
		}
	</script>
}

templ ApiUtils() {
	<script>
		if (!window.makeApiRequest) {
			window.makeApiRequest = function(url, method = 'POST', body = null) {
				const options = {
					method: method,
					headers: {
						'Content-Type': 'application/json',
					},
				};

				if (body) {
					options.body = JSON.stringify(body);
				}

				return fetch(url, options)
					.then(response => response.json());
			};
		}
	</script>
}

templ DebounceUtil() {
	<script>
		if (!window.debounce) {
			window.debounce = function(func, wait) {
				let timeout;
				return function executedFunction(...args) {
					const later = () => {
						clearTimeout(timeout);
						func(...args);
					};
					clearTimeout(timeout);
					timeout = setTimeout(later, wait);
				};
			};
		}
	</script>
}

templ SmoothNavigationUtils() {
	<script>
		if (!window.smoothNavigate) {
			window.smoothNavigate = function(url, options = {}) {
				const {
					fadeOut = true,
					showLoader = true,
					delay = 150
				} = options;

				if (fadeOut) {
					const main = document.querySelector('main');
					if (main) {
						main.style.transition = 'opacity 150ms ease-out';
						main.style.opacity = '0';
					}
				}

				if (showLoader) {
					const loader = document.createElement('div');
					loader.id = 'page-loader';
					loader.className = 'fixed inset-0 bg-gray-950/50 backdrop-blur-sm z-50 flex items-center justify-center';
					loader.innerHTML = `
						<div class="flex items-center space-x-3 bg-gray-900 px-6 py-4 rounded-lg border border-gray-700">
							<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-500"></div>
							<span class="text-gray-300">Loading...</span>
						</div>
					`;
					document.body.appendChild(loader);
				}

				setTimeout(() => {
					window.location.href = url;
				}, delay);
			};

			// Enhanced API request with better error handling and loading states
			window.makeApiRequestEnhanced = function(url, options = {}) {
				const {
					method = 'POST',
					body = null,
					showProgress = true,
					optimistic = false,
					onProgress = null
				} = options;

				const requestOptions = {
					method: method,
					headers: {
						'Content-Type': 'application/json',
					},
				};

				if (body) {
					requestOptions.body = JSON.stringify(body);
				}

				// Show progress indicator
				if (showProgress && onProgress) {
					onProgress('started');
				}

				return fetch(url, requestOptions)
					.then(response => {
						if (showProgress && onProgress) {
							onProgress('processing');
						}

						if (!response.ok) {
							throw new Error(`HTTP ${response.status}: ${response.statusText}`);
						}

						return response.json();
					})
					.then(data => {
						if (showProgress && onProgress) {
							onProgress('completed');
						}
						return data;
					})
					.catch(error => {
						if (showProgress && onProgress) {
							onProgress('error', error);
						}
						throw error;
					});
			};

			// Virtual scrolling for large lists
			window.initVirtualScroll = function(containerId, itemHeight = 100) {
				const container = document.getElementById(containerId);
				if (!container) return;

				const items = Array.from(container.children);
				const totalItems = items.length;
				const containerHeight = container.clientHeight;
				const visibleItems = Math.ceil(containerHeight / itemHeight) + 2; // Buffer

				let scrollTop = 0;
				let startIndex = 0;

				function updateVisibleItems() {
					startIndex = Math.floor(scrollTop / itemHeight);
					const endIndex = Math.min(startIndex + visibleItems, totalItems);

					// Hide all items
					items.forEach((item, index) => {
						if (index >= startIndex && index < endIndex) {
							item.style.display = 'block';
							item.style.transform = `translateY(${index * itemHeight}px)`;
						} else {
							item.style.display = 'none';
						}
					});
				}

				container.addEventListener('scroll', () => {
					scrollTop = container.scrollTop;
					requestAnimationFrame(updateVisibleItems);
				});

				updateVisibleItems();
			};
		}
	</script>
}
