package components

import (
	"github.com/jon4hz/jellysweep/api/models"
	"sort"
	"time"
)

// DailyCleanupPoint represents storage cleaned up on a specific day
type DailyCleanupPoint struct {
	Date       time.Time
	DailyBytes int64
	ItemsCount int
}

// CumulativeCleanupPoint represents cumulative storage freed over time
type CumulativeCleanupPoint struct {
	Date            time.Time
	CumulativeBytes int64
	ItemsDeleted    int
}

// DailyChartData represents the structure for daily chart JSON data
type DailyChartData struct {
	Points       []DailyChartPoint `json:"points"`
	TotalStorage int64             `json:"totalStorage"`
}

// DailyChartPoint represents a single data point for the daily chart
type DailyChartPoint struct {
	Date       string `json:"date"`
	DailyBytes int64  `json:"dailyBytes"`
	ItemsCount int    `json:"itemsCount"`
}

// CumulativeChartData represents the structure for cumulative chart JSON data
type CumulativeChartData struct {
	Points       []CumulativeChartPoint `json:"points"`
	TotalStorage int64                  `json:"totalStorage"`
}

// CumulativeChartPoint represents a single data point for the cumulative chart
type CumulativeChartPoint struct {
	Date            string `json:"date"`
	CumulativeBytes int64  `json:"cumulativeBytes"`
	ItemsDeleted    int    `json:"itemsDeleted"`
}

// calculateDailyCleanupData processes media items to create data points for daily cleanup graph
func calculateDailyCleanupData(items []models.MediaItem) []DailyCleanupPoint {
	if len(items) == 0 {
		return []DailyCleanupPoint{}
	}

	// Group items by date (day)
	dailyMap := make(map[string][]models.MediaItem)
	for _, item := range items {
		dateKey := item.DeletionDate.Format("2006-01-02")
		dailyMap[dateKey] = append(dailyMap[dateKey], item)
	}

	var points []DailyCleanupPoint
	for dateKey, dayItems := range dailyMap {
		date, _ := time.Parse("2006-01-02", dateKey)

		var dailyBytes int64
		for _, item := range dayItems {
			dailyBytes += item.FileSize
		}

		points = append(points, DailyCleanupPoint{
			Date:       date,
			DailyBytes: dailyBytes,
			ItemsCount: len(dayItems),
		})
	}

	// Sort points by date
	sort.Slice(points, func(i, j int) bool {
		return points[i].Date.Before(points[j].Date)
	})

	return points
}

// calculateCumulativeCleanupData processes media items to create data points for cumulative cleanup graph
func calculateCumulativeCleanupData(items []models.MediaItem) []CumulativeCleanupPoint {
	if len(items) == 0 {
		return []CumulativeCleanupPoint{}
	}

	// Sort items by deletion date
	sortedItems := make([]models.MediaItem, len(items))
	copy(sortedItems, items)
	sort.Slice(sortedItems, func(i, j int) bool {
		return sortedItems[i].DeletionDate.Before(sortedItems[j].DeletionDate)
	})

	var points []CumulativeCleanupPoint
	var cumulativeBytes int64
	var itemsDeleted int

	// Start from the first deletion date
	firstDeletionDate := sortedItems[0].DeletionDate
	points = append(points, CumulativeCleanupPoint{
		Date:            firstDeletionDate,
		CumulativeBytes: 0,
		ItemsDeleted:    0,
	})

	// Calculate cumulative storage freed at each deletion date
	for _, item := range sortedItems {
		cumulativeBytes += item.FileSize
		itemsDeleted++

		points = append(points, CumulativeCleanupPoint{
			Date:            item.DeletionDate,
			CumulativeBytes: cumulativeBytes,
			ItemsDeleted:    itemsDeleted,
		})
	}

	return points
}

// getTotalStorageToFree calculates the total storage that will be freed
func getTotalStorageToFree(items []models.MediaItem) int64 {
	var total int64
	for _, item := range items {
		total += item.FileSize
	}
	return total
}

// generateDailyChartData creates the data structure for the daily cleanup chart
func generateDailyChartData(points []DailyCleanupPoint, totalStorage int64) DailyChartData {
	chartPoints := make([]DailyChartPoint, len(points))
	for i, point := range points {
		chartPoints[i] = DailyChartPoint{
			Date:       point.Date.Format("2006-01-02T15:04:05Z07:00"),
			DailyBytes: point.DailyBytes,
			ItemsCount: point.ItemsCount,
		}
	}

	return DailyChartData{
		Points:       chartPoints,
		TotalStorage: totalStorage,
	}
}

// generateCumulativeChartData creates the data structure for the cumulative cleanup chart
func generateCumulativeChartData(points []CumulativeCleanupPoint, totalStorage int64) CumulativeChartData {
	chartPoints := make([]CumulativeChartPoint, len(points))
	for i, point := range points {
		chartPoints[i] = CumulativeChartPoint{
			Date:            point.Date.Format("2006-01-02T15:04:05Z07:00"),
			CumulativeBytes: point.CumulativeBytes,
			ItemsDeleted:    point.ItemsDeleted,
		}
	}

	return CumulativeChartData{
		Points:       chartPoints,
		TotalStorage: totalStorage,
	}
}

templ StatsTab(mediaItems []models.MediaItem) {
	<!-- Optimized charts with loading states -->
	<div id="stats-loading" class="hidden">
		<div class="flex justify-center items-center py-16">
			<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-indigo-500"></div>
			<span class="ml-3 text-gray-400">Loading charts...</span>
		</div>
	</div>
	<div id="stats-content">
		@DailyCleanupGraph(calculateDailyCleanupData(mediaItems), getTotalStorageToFree(mediaItems))
		@CumulativeCleanupGraph(calculateCumulativeCleanupData(mediaItems), getTotalStorageToFree(mediaItems))
	</div>
}

templ DailyCleanupGraph(dailyPoints []DailyCleanupPoint, totalStorage int64) {
	<div class="card p-6 mb-6">
		<div class="flex items-center justify-between mb-6">
			<div>
				<h2 class="text-xl font-semibold text-gray-100">Daily Storage Cleanup</h2>
				<p class="text-sm text-gray-400 mt-1">Storage freed per day</p>
			</div>
			<div class="text-right">
				<div class="text-lg font-semibold text-green-400">{ FormatFileSize(totalStorage) }</div>
				<div class="text-sm text-gray-400">Total to be freed</div>
			</div>
		</div>
		if len(dailyPoints) > 0 {
			<div class="relative">
				<!-- Chart.js Canvas -->
				<canvas id="daily-cleanup-chart" class="w-full h-64"></canvas>
				<!-- Hidden data for JavaScript -->
				@templ.JSONScript("daily-cleanup-data", generateDailyChartData(dailyPoints, totalStorage))
			</div>
		} else {
			<div class="text-center py-8 text-gray-400">
				<svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
				</svg>
				<p>No data available for daily cleanup graph</p>
			</div>
		}
	</div>
}

templ CumulativeCleanupGraph(cumulativePoints []CumulativeCleanupPoint, totalStorage int64) {
	<div class="card p-6">
		<div class="flex items-center justify-between mb-6">
			<div>
				<h2 class="text-xl font-semibold text-gray-100">Cumulative Storage Timeline</h2>
				<p class="text-sm text-gray-400 mt-1">Total storage freed over time</p>
			</div>
			<div class="text-right">
				<div class="text-lg font-semibold text-blue-400">{ FormatFileSize(totalStorage) }</div>
				<div class="text-sm text-gray-400">Total to be freed</div>
			</div>
		</div>
		if len(cumulativePoints) > 1 {
			<div class="relative">
				<!-- Chart.js Canvas -->
				<canvas id="cumulative-cleanup-chart" class="w-full h-64"></canvas>
				<!-- Hidden data for JavaScript -->
				@templ.JSONScript("cumulative-cleanup-data", generateCumulativeChartData(cumulativePoints, totalStorage))
			</div>
		} else {
			<div class="text-center py-8 text-gray-400">
				<svg class="w-16 h-16 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
				</svg>
				<p>Not enough data points for cumulative graph</p>
			</div>
		}
	</div>
}

script StatsScript() {
	// Store chart instances to properly manage them
	let dailyChart = null;
	let cumulativeChart = null;
	let chartsInitialized = false;
	let chartsData = {
		daily: null,
		cumulative: null
	};

	// Cache formatted chart data to avoid reprocessing
	let chartDataCache = {
		daily: null,
		cumulative: null
	};

	// Expose initialization function globally
	window.initializeOptimizedCharts = function() {
		// Pre-load chart data when page loads
		preloadChartData();

		// Set up optimized tab switching with immediate chart rendering
		setupOptimizedTabSwitching();

		// If stats tab is initially active, render charts immediately
		const statsTab = document.getElementById('cleanup-timeline-content');
		if (statsTab && !statsTab.classList.contains('hidden')) {
			renderChartsIfVisible();
		}
	};

	function preloadChartData() {
		// Cache chart data during page load for instant rendering later
		const dailyDataScript = document.getElementById('daily-cleanup-data');
		const cumulativeDataScript = document.getElementById('cumulative-cleanup-data');

		if (dailyDataScript) {
			try {
				chartsData.daily = JSON.parse(dailyDataScript.textContent);
				// Pre-format chart data for better performance
				if (chartsData.daily && chartsData.daily.points) {
					chartDataCache.daily = chartsData.daily.points.map(point => ({
						x: new Date(point.date),
						y: point.dailyBytes
					}));
				}
			} catch (error) {
				console.error('Error parsing daily chart data:', error);
			}
		}

		if (cumulativeDataScript) {
			try {
				chartsData.cumulative = JSON.parse(cumulativeDataScript.textContent);
				// Pre-format chart data for better performance
				if (chartsData.cumulative && chartsData.cumulative.points) {
					chartDataCache.cumulative = chartsData.cumulative.points.map(point => ({
						x: new Date(point.date),
						y: point.cumulativeBytes
					}));
				}
			} catch (error) {
				console.error('Error parsing cumulative chart data:', error);
			}
		}
	}

	function setupOptimizedTabSwitching() {
		const statsTabButton = document.getElementById('cleanup-timeline');
		if (statsTabButton) {
			statsTabButton.addEventListener('click', function() {
				// Show loading state briefly for visual feedback
				const loading = document.getElementById('stats-loading');
				const content = document.getElementById('stats-content');

				if (loading && content && !chartsInitialized) {
					loading.classList.remove('hidden');
					content.style.opacity = '0.3';
				}

				// Use requestAnimationFrame for smooth transition
				requestAnimationFrame(() => {
					renderChartsIfVisible();

					// Hide loading state after charts are rendered
					setTimeout(() => {
						if (loading) loading.classList.add('hidden');
						if (content) content.style.opacity = '1';
					}, 150);
				});
			});
		}
	}

	function renderChartsIfVisible() {
		const statsTab = document.getElementById('cleanup-timeline-content');
		if (!statsTab || statsTab.classList.contains('hidden')) {
			return;
		}

		// Only initialize charts once, reuse existing instances
		if (!chartsInitialized) {
			chartsInitialized = true;

			// Use Promise.all for parallel chart initialization
			Promise.all([
				new Promise(resolve => {
					setTimeout(() => {
						initializeDailyChart();
						resolve();
					}, 0);
				}),
				new Promise(resolve => {
					setTimeout(() => {
						initializeCumulativeChart();
						resolve();
					}, 0);
				})
			]).then(() => {
				// Charts are ready, trigger any resize events if needed
				if (dailyChart) dailyChart.resize();
				if (cumulativeChart) cumulativeChart.resize();
			}).catch(error => {
				console.error('Error initializing charts:', error);
			});
		} else {
			// Charts already exist, just ensure they're properly sized
			if (dailyChart) dailyChart.resize();
			if (cumulativeChart) cumulativeChart.resize();
		}
	}

	function initializeDailyChart() {
		const canvas = document.getElementById('daily-cleanup-chart');
		if (!canvas || !chartsData.daily || !chartDataCache.daily) return;

		// Skip if chart already exists and canvas is visible
		if (dailyChart && canvas.offsetParent !== null) {
			return;
		}

		// Destroy existing chart if it exists
		if (dailyChart) {
			dailyChart.destroy();
			dailyChart = null;
		}

		try {
			const data = chartsData.daily;
			const points = data.points || [];

			if (points.length === 0) return;

			// Use pre-formatted chart data for better performance
			const chartData = chartDataCache.daily;

			// Initialize Chart.js with performance optimizations
			dailyChart = new Chart(canvas, {
				type: 'bar',
				data: {
					datasets: [{
						label: 'Daily Storage Freed',
						data: chartData,
						backgroundColor: 'rgba(34, 197, 94, 0.8)',
						borderColor: 'rgb(34, 197, 94)',
						borderWidth: 1,
						borderSkipped: false,
						// Performance optimizations
						indexAxis: 'x',
						maxBarThickness: 50
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: false,
					animation: {
						duration: 200, // Faster animation for better perceived performance
						easing: 'easeOutQuart'
					},
					parsing: false, // Skip parsing since we provide pre-formatted data
					normalized: true, // Optimize for pre-sorted data
					datasets: {
						bar: {
							categoryPercentage: 0.8,
							barPercentage: 0.9
						}
					},
					elements: {
						bar: {
							borderWidth: 1
						}
					},
					plugins: {
						legend: {
							display: false
						},
						tooltip: {
							enabled: true,
							mode: 'index',
							intersect: false,
							backgroundColor: 'rgba(17, 24, 39, 0.95)',
							titleColor: 'rgb(229, 231, 235)',
							bodyColor: 'rgb(156, 163, 175)',
							borderColor: 'rgb(75, 85, 99)',
							borderWidth: 1,
							callbacks: {
								title: function(context) {
									const date = new Date(context[0].parsed.x);
									return date.toLocaleDateString('en-US', {
										month: 'short',
										day: 'numeric',
										year: 'numeric'
									});
								},
								label: function(context) {
									const bytes = context.parsed.y;
									const pointIndex = context.dataIndex;
									const point = points[pointIndex];

									return [
										'Storage freed: ' + formatBytes(bytes),
										'Items deleted: ' + point.itemsCount
									];
								}
							}
						}
					},
					scales: {
						x: {
							type: 'time',
							time: {
								unit: 'day',
								displayFormats: {
									day: 'MMM d',
									week: 'MMM d',
									month: 'MMM yyyy'
								},
								tooltipFormat: 'MMM d, yyyy'
							},
							min: chartData.length > 0 ? chartData[0].x : undefined,
							max: chartData.length > 0 ? chartData[chartData.length - 1].x : undefined,
							grid: {
								color: 'rgba(75, 85, 99, 0.3)',
								display: true
							},
							ticks: {
								color: 'rgb(156, 163, 175)',
								maxTicksLimit: 30,
								autoSkip: true
							}
						},
						y: {
							beginAtZero: true,
							grid: {
								color: 'rgba(75, 85, 99, 0.3)',
								display: true
							},
							ticks: {
								color: 'rgb(156, 163, 175)',
								maxTicksLimit: 8,
								callback: function(value) {
									return formatBytes(value);
								}
							}
						}
					},
					interaction: {
						intersect: false,
						mode: 'index'
					}
				}
			});
		} catch (error) {
			console.error('Error initializing daily chart:', error);
		}
	}

	function initializeCumulativeChart() {
		const canvas = document.getElementById('cumulative-cleanup-chart');
		if (!canvas || !chartsData.cumulative || !chartDataCache.cumulative) return;

		// Skip if chart already exists and canvas is visible
		if (cumulativeChart && canvas.offsetParent !== null) {
			return;
		}

		// Destroy existing chart if it exists
		if (cumulativeChart) {
			cumulativeChart.destroy();
			cumulativeChart = null;
		}

		try {
			const data = chartsData.cumulative;
			const points = data.points || [];

			if (points.length < 2) return;

			// Use pre-formatted chart data for better performance
			const chartData = chartDataCache.cumulative;

			// Initialize Chart.js with performance optimizations
			cumulativeChart = new Chart(canvas, {
				type: 'line',
				data: {
					datasets: [{
						label: 'Cumulative Storage Freed',
						data: chartData,
						borderColor: 'rgb(59, 130, 246)',
						backgroundColor: 'rgba(59, 130, 246, 0.1)',
						fill: true,
						tension: 0.2,
						pointBackgroundColor: 'rgb(59, 130, 246)',
						pointBorderColor: 'rgb(59, 130, 246)',
						pointRadius: 3,
						pointHoverRadius: 5,
						// Performance optimizations
						pointBorderWidth: 1,
						borderWidth: 2
					}]
				},
				options: {
					responsive: true,
					maintainAspectRatio: false,
					animation: {
						duration: 200, // Faster animation for better perceived performance
						easing: 'easeOutQuart'
					},
					parsing: false, // Skip parsing since we provide pre-formatted data
					normalized: true, // Optimize for pre-sorted data
					elements: {
						point: {
							radius: 3,
							hoverRadius: 5
						},
						line: {
							borderJoinStyle: 'round'
						}
					},
					plugins: {
						legend: {
							display: false
						},
						tooltip: {
							enabled: true,
							mode: 'index',
							intersect: false,
							backgroundColor: 'rgba(17, 24, 39, 0.95)',
							titleColor: 'rgb(229, 231, 235)',
							bodyColor: 'rgb(156, 163, 175)',
							borderColor: 'rgb(75, 85, 99)',
							borderWidth: 1,
							callbacks: {
								title: function(context) {
									const date = new Date(context[0].parsed.x);
									return date.toLocaleDateString('en-US', {
										month: 'short',
										day: 'numeric',
										year: 'numeric'
									});
								},
								label: function(context) {
									const bytes = context.parsed.y;
									const pointIndex = context.dataIndex;
									const point = points[pointIndex];

									return [
										'Total storage freed: ' + formatBytes(bytes),
										'Total items deleted: ' + point.itemsDeleted
									];
								}
							}
						}
					},
					scales: {
						x: {
							type: 'time',
							time: {
								unit: 'day',
								displayFormats: {
									day: 'MMM d',
									week: 'MMM d',
									month: 'MMM yyyy'
								},
								tooltipFormat: 'MMM d, yyyy'
							},
							min: chartData.length > 0 ? chartData[0].x : undefined,
							max: chartData.length > 0 ? chartData[chartData.length - 1].x : undefined,
							grid: {
								color: 'rgba(75, 85, 99, 0.3)',
								display: true
							},
							ticks: {
								color: 'rgb(156, 163, 175)',
								maxTicksLimit: 30,
								autoSkip: true
							}
						},
						y: {
							beginAtZero: true,
							grid: {
								color: 'rgba(75, 85, 99, 0.3)',
								display: true
							},
							ticks: {
								color: 'rgb(156, 163, 175)',
								maxTicksLimit: 8,
								callback: function(value) {
									return formatBytes(value);
								}
							}
						}
					},
					interaction: {
						intersect: false,
						mode: 'index'
					}
				}
			});
		} catch (error) {
			console.error('Error initializing cumulative chart:', error);
		}
	}

	function formatBytes(bytes) {
		if (bytes === 0) return '0 Bytes';

		const k = 1024;
		const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
		const i = Math.floor(Math.log(bytes) / Math.log(k));

		return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
	}
}
