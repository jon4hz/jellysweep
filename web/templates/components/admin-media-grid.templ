package components

import (
	"fmt"
	"github.com/jon4hz/jellysweep/database"
)

// AdminKeepRequestGrid creates a media grid specifically for keep requests in admin panel
templ AdminKeepRequestGrid(requestedMedia []database.Media) {
	<div id="approval-queue-container" class="space-y-4">
		<!-- Loading State -->
		<div id="approval-queue-container-grid-loading" class="hidden">
			@SkeletonGrid(8)
		</div>
		<!-- Custom content (filters, search, etc.) -->
		@AdminKeepRequestFilters(requestedMedia)
		<!-- Media Grid -->
		<div
			id="approval-queue-grid"
			class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-4 sm:gap-6 transition-opacity duration-200"
			data-page-size="8"
			data-mobile-page-size="4"
			data-total-items={ fmt.Sprint(len(requestedMedia)) }
			data-enable-search="true"
			data-enable-filters="true"
			data-enable-sorting="true"
			data-enable-refresh="true"
			data-animate-changes="true"
			data-keep-requests={ templ.JSONString(requestedMedia) }
		>
			<!-- Items will be populated by JavaScript -->
		</div>
		<!-- Loading indicator for infinite scroll -->
		<div id="approval-queue-container-scroll-loading" class="hidden text-center py-8">
			<div class="inline-flex items-center space-x-2">
				<div class="animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-500"></div>
				<span class="text-gray-400">Loading more...</span>
			</div>
		</div>
		<!-- Load More Button (fallback for poor connections) -->
		<div id="approval-queue-container-load-more-container" class="text-center mt-6 hidden">
			<button id="approval-queue-container-load-more-btn" class="btn-secondary">
				<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
				</svg>
				Load More
			</button>
		</div>
		<!-- Scroll to Top Button -->
		<button
			id="approval-queue-container-scroll-to-top"
			class="fixed bottom-4 right-4 md:bottom-6 md:right-6 bg-indigo-600 hover:bg-indigo-700 active:bg-indigo-800 text-white p-2 md:p-3 rounded-full shadow-lg transition-all duration-200 opacity-0 pointer-events-none z-50 transform translate-y-4"
			aria-label="Scroll to top"
		>
			<svg class="w-4 h-4 md:w-5 md:h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
				<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 10l7-7m0 0l7 7m-7-7v18"></path>
			</svg>
		</button>
		<!-- Virtual scroll sentinel for intersection observer -->
		<div id="approval-queue-container-scroll-sentinel" class="h-1 opacity-0"></div>
	</div>
}

// AdminKeepRequestFilters creates the filter interface for keep requests
templ AdminKeepRequestFilters(requestedMedia []database.Media) {
	<div class="card-no-hover p-4 sm:p-6 mb-6">
		<div class="flex flex-col space-y-4 lg:space-y-0 lg:flex-row lg:items-center lg:justify-between">
			<div class="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:flex-wrap sm:items-center sm:gap-4">
				<div class="relative flex-1 sm:flex-none">
					<input type="text" id="request-search" placeholder="Search keep requests..." class="input-field pl-10 pr-4 py-2 w-full sm:w-64"/>
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
						</svg>
					</div>
				</div>
				<select id="request-library-filter" class="input-field flex-1 sm:flex-none">
					<option value="">All Libraries</option>
					for _, library := range getUniqueRequestLibraries(requestedMedia) {
						<option value={ library }>{ library }</option>
					}
				</select>
				<select id="request-type-filter" class="input-field flex-1 sm:flex-none">
					<option value="">All Types</option>
					for _, mediaType := range getUniqueRequestTypes(requestedMedia) {
						<option value={ mediaType }>{ mediaType }</option>
					}
				</select>
				<select id="request-sort-by" class="input-field flex-1 sm:flex-none">
					<option value="expiry-date-asc">Expires Soonest First</option>
					<option value="expiry-date-desc">Expires Latest First</option>
					<option value="deletion-date-asc">Deletion Date (Earliest First)</option>
					<option value="deletion-date-desc">Deletion Date (Latest First)</option>
					<option value="title-asc">Title (A-Z)</option>
					<option value="title-desc">Title (Z-A)</option>
				</select>
			</div>
			<div class="flex items-center">
				<button id="request-refresh-btn" class="flex items-center justify-center btn-secondary w-full sm:w-auto">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Refresh
				</button>
			</div>
		</div>
	</div>
}

// AdminMediaGrid creates a media grid for keep/sweep decisions in admin panel
templ AdminMediaGrid(mediaItems []database.Media) {
	@MediaGrid(mediaItems, MediaGridConfig{
		ContainerID:    "keep-sweep-container",
		GridID:         "keep-sweep-grid",
		EnableSearch:   true,
		EnableFilters:  true,
		EnableSorting:  true,
		EnableRefresh:  true,
		PageSize:       8,
		MobilePageSize: 4,
		AnimateChanges: true,
	}, AdminMediaFilters(mediaItems))
}

// AdminMediaFilters creates the filter interface for keep/sweep media
templ AdminMediaFilters(mediaItems []database.Media) {
	<div class="card-no-hover p-4 sm:p-6 mb-6">
		<div class="flex flex-col space-y-4 lg:space-y-0 lg:flex-row lg:items-center lg:justify-between">
			<div class="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:flex-wrap sm:items-center sm:gap-4">
				<div class="relative flex-1 sm:flex-none">
					<input type="text" id="media-search" placeholder="Search media..." class="input-field pl-10 pr-4 py-2 w-full sm:w-64"/>
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
						</svg>
					</div>
				</div>
				<select id="media-library-filter" class="input-field flex-1 sm:flex-none">
					<option value="">All Libraries</option>
					for _, library := range GetUniqueLibraries(mediaItems) {
						<option value={ library }>{ library }</option>
					}
				</select>
				<select id="media-type-filter" class="input-field flex-1 sm:flex-none">
					<option value="">All Types</option>
					for _, mediaType := range getUniqueMediaTypes(mediaItems) {
						<option value={ mediaType }>{ mediaType }</option>
					}
				</select>
				<select id="media-status-filter" class="input-field flex-1 sm:flex-none">
					<option value="">All Status</option>
					<option value="requested">Keep Requested</option>
					<option value="must-delete">Must Delete</option>
					<option value="normal">Normal</option>
				</select>
				<select id="media-sort-by" class="input-field flex-1 sm:flex-none">
					<option value="deletion-date-asc">Deletion Date (Earliest First)</option>
					<option value="deletion-date-desc">Deletion Date (Latest First)</option>
					<option value="title-asc">Title (A-Z)</option>
					<option value="title-desc">Title (Z-A)</option>
					<option value="size-asc">File Size (Smallest First)</option>
					<option value="size-desc">File Size (Largest First)</option>
				</select>
			</div>
			<div class="flex items-center">
				<button id="media-refresh-btn" class="flex items-center justify-center btn-secondary w-full sm:w-auto">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Refresh
				</button>
			</div>
		</div>
	</div>
}

// Helper functions to extract unique values for filters
func getUniqueRequestLibraries(requests []database.Media) []string {
	libraryMap := make(map[string]bool)
	var libraries []string

	for _, request := range requests {
		if request.LibraryName != "" && !libraryMap[request.LibraryName] {
			libraryMap[request.LibraryName] = true
			libraries = append(libraries, request.LibraryName)
		}
	}

	return libraries
}

func getUniqueRequestTypes(requests []database.Media) []database.MediaType {
	typeMap := make(map[database.MediaType]bool)
	var types []database.MediaType

	for _, request := range requests {
		if request.MediaType != "" && !typeMap[request.MediaType] {
			typeMap[request.MediaType] = true
			types = append(types, request.MediaType)
		}
	}

	return types
}

func getUniqueMediaTypes(items []database.Media) []database.MediaType {
	typeMap := make(map[database.MediaType]bool)
	var types []database.MediaType

	for _, item := range items {
		if item.MediaType != "" && !typeMap[item.MediaType] {
			typeMap[item.MediaType] = true
			types = append(types, item.MediaType)
		}
	}

	return types
}

script AdminKeepRequestGridScript() {
	class AdminKeepRequestGridManager extends MediaGridManager {
		constructor(containerId, options = {}) {
			super(containerId, options);
			// Store original keep requests data for expiry information
			this.keepRequestsData = {};
		}

		loadMediaItemsFromDOM() {
			// Add a small delay to ensure DOM and data attributes are fully ready
			setTimeout(() => {
				this.doLoadMediaItemsFromDOM();
			}, 0);
		}

		doLoadMediaItemsFromDOM() {
			try {
				// Ensure the grid element exists and has data
				if (!this.grid) {
					console.warn('Grid element not found, retrying...');
					setTimeout(() => this.doLoadMediaItemsFromDOM(), 50);
					return;
				}

				const keepRequestsData = this.grid.dataset.keepRequests;
				if (!keepRequestsData) {
					console.warn('No keep requests data found in grid element, retrying...');
					// Retry a few times in case the data attribute is still being set
					if (!this.retryCount) this.retryCount = 0;
					if (this.retryCount < 5) {
						this.retryCount++;
						setTimeout(() => this.doLoadMediaItemsFromDOM(), 100);
						return;
					}
					console.warn('Failed to load keep requests data after retries');
					this.setItems([]);
					return;
				}

				const rawKeepRequests = JSON.parse(keepRequestsData);
				// Transform database.Media (with Request) to MediaItem format for the grid
				const transformedItems = rawKeepRequests.map(request => {
					// database.Media has ID, not MediaID
					const deletionTimestamp = request.DefaultDeleteAt ? new Date(request.DefaultDeleteAt).getTime() : 0;

					return {
						id: request.ID,
						title: request.Title,
						type: request.MediaType,
						year: request.Year,
						library: request.LibraryName,
						posterURL: request.PosterURL,
						deletionTimestamp: deletionTimestamp,
						canRequest: false, // Already requested
						hasRequested: true, // By definition
						mustDelete: false, // Keep requests are for keeping
						fileSize: request.FileSize || 0, // Include file size from database.Media
						cleanupMode: "",
						keepCount: 0
					};
				});
				this.setItems(transformedItems);
			} catch (error) {
				console.error('Failed to parse keep requests data:', error);
				this.setItems([]);
			}
		}

		createCardElement(item) {
			const div = document.createElement('div');
			div.className = 'media-card';
			div.id = `request-${item.id}`;
			div.setAttribute('data-media-id', item.id);
			div.setAttribute('data-item-id', item.id);
			div.setAttribute('data-title', item.title);
			div.setAttribute('data-library', item.library);
			div.setAttribute('data-type', item.type);

			// Use the admin-specific card HTML for keep requests
			div.innerHTML = this.createKeepRequestCardHTML(item);

			// Use event delegation on the card div instead of finding individual buttons
			div.addEventListener('click', (e) => {
				e.preventDefault();
				const target = e.target.closest('button');
				if (!target) return;

				const mediaId = target.getAttribute('data-media-id');
				/*if (mediaId !== item.id) return; */

				if (target.classList.contains('accept-btn')) {
					const originalContent = this.setButtonLoading(target, 'Accepting...');
					this.handleItemAction(item.id, 'accept', div).catch(() => {
						this.resetButton(target, originalContent);
					});
				} else if (target.classList.contains('decline-btn')) {
					const originalContent = this.setButtonLoading(target, 'Declining...');
					this.handleItemAction(item.id, 'decline', div).catch(() => {
						this.resetButton(target, originalContent);
					});
				}
			});

			return div;
		}

		createKeepRequestCardHTML(item) {
			// Note: For keep requests, we don't have file size, so we'll omit it
			const deletionDate = new Date(item.deletionTimestamp);
			const deletionTime = this.formatRelativeTime(deletionDate);

			const posterImg = item.posterURL
				? `<img src="${item.posterURL}" class="w-full h-64 object-cover" loading="lazy"/>`
				: `<div class="w-full h-64 bg-gray-700 flex items-center justify-center">
					<svg class="w-16 h-16 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 011 1v2a1 1 0 01-1 1h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8H3a1 1 0 01-1-1V5a1 1 0 011-1h3z"></path>
					</svg>
				</div>`;

			return `
				<!-- Desktop Card Layout -->
				<div class="hidden sm:block">
					<div class="card h-full flex flex-col">
						<div class="aspect-w-2 aspect-h-3 bg-gray-800 overflow-hidden rounded-t-lg">
							${posterImg}
						</div>
						<div class="p-4 flex-1 flex flex-col">
							<div class="flex-1">
								<h3 class="text-lg font-semibold text-gray-100 truncate">${item.title}</h3>
								<div class="flex items-center space-x-2 mt-1">
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
										${item.type}
									</span>
									${item.year > 0 ? `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-600 text-gray-300">${item.year}</span>` : ''}
								</div>
								<div class="mt-3 space-y-2">
									<div class="flex items-center text-sm text-gray-400">
										<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
										</svg>
										${item.library}
									</div>
									<div class="flex items-center text-sm text-red-400">
										<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										Deletes ${deletionTime}
									</div>
								</div>
							</div>
							<div class="mt-4 flex gap-2">
								<button
									id="accept-desktop-${item.id}"
									data-media-id="${item.id}"
									class="admin-action-btn accept-btn flex-1 inline-flex items-center justify-center px-3 py-2 rounded-lg font-medium transition-colors duration-200 text-sm"
									style="background-color: #16a34a; color: white;"
									onmouseover="this.style.backgroundColor='#15803d'"
									onmouseout="this.style.backgroundColor='#16a34a'"
								>
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
									</svg>
									Accept
								</button>
								<button
									id="decline-desktop-${item.id}"
									data-media-id="${item.id}"
									class="admin-action-btn decline-btn flex-1 inline-flex items-center justify-center px-3 py-2 rounded-lg font-medium transition-colors duration-200 text-sm"
									style="background-color: #dc2626; color: white;"
									onmouseover="this.style.backgroundColor='#b91c1c'"
									onmouseout="this.style.backgroundColor='#dc2626'"
								>
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
									</svg>
									Decline
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Mobile Horizontal Layout -->
				<div class="block sm:hidden">
					<div class="card">
						<div class="flex items-center p-4 gap-4">
							<div class="shrink-0">
								${item.posterURL
									? `<img src="${item.posterURL}" alt="${item.title}" class="w-16 h-24 object-cover rounded" loading="lazy"/>`
									: `<div class="w-16 h-24 bg-gray-700 rounded flex items-center justify-center">
										<svg class="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 011 1v2a1 1 0 01-1 1h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8H3a1 1 0 01-1-1V5a1 1 0 011-1h3z"></path>
										</svg>
									</div>`
								}
							</div>
							<div class="flex-1 min-w-0">
								<h4 class="text-lg font-medium text-gray-100 truncate">${item.title}</h4>
								<div class="mt-1 flex flex-wrap items-center gap-2 text-sm text-gray-400">
									<div class="flex items-center">
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
										</svg>
										${item.library}
									</div>
									<div class="flex items-center text-red-400">
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										Deletes ${deletionTime}
									</div>
								</div>
								<div class="mt-2 flex flex-wrap items-center gap-2">
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
										${item.type}
									</span>
									${item.year > 0 ? `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-600 text-gray-300">${item.year}</span>` : ''}
								</div>
								<div class="mt-3 flex gap-2">
									<button
										id="accept-mobile-${item.id}"
										data-media-id="${item.id}"
										class="admin-action-btn accept-btn flex-1 inline-flex items-center justify-center px-3 py-2 rounded-lg font-medium transition-colors duration-200 text-sm"
										style="background-color: #16a34a; color: white;"
										onmouseover="this.style.backgroundColor='#15803d'"
										onmouseout="this.style.backgroundColor='#16a34a'"
									>
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
										</svg>
										Accept
									</button>
									<button
										id="decline-mobile-${item.id}"
										data-media-id="${item.id}"
										class="admin-action-btn decline-btn flex-1 inline-flex items-center justify-center px-3 py-2 rounded-lg font-medium transition-colors duration-200 text-sm"
										style="background-color: #dc2626; color: white;"
										onmouseover="this.style.backgroundColor='#b91c1c'"
										onmouseout="this.style.backgroundColor='#dc2626'"
									>
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
										</svg>
										Decline
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			`;
		}

		// Override sorting to include expiry date
		sortItems(sortBy) {
			// Store current scroll position
			const scrollPosition = window.scrollY;

			this.filteredItems.sort((a, b) => {
				switch (sortBy) {
					case 'title-asc':
						return a.title.localeCompare(b.title);
					case 'title-desc':
						return b.title.localeCompare(a.title);
					case 'deletion-date-asc':
						return a.deletionTimestamp - b.deletionTimestamp;
					case 'deletion-date-desc':
						return b.deletionTimestamp - a.deletionTimestamp;
					default:
						return 0;
				}
			});

			// Re-render everything
			this.renderedItems.clear();
			this.hasMoreData = true;
			this.clearGrid();
			this.renderInitialBatch();

			// Restore scroll position smoothly
			requestAnimationFrame(() => {
				window.scrollTo({
					top: Math.min(scrollPosition, document.body.scrollHeight - window.innerHeight),
					behavior: 'smooth'
				});
			});
		}

		// Override filtering to include type filter
		filterItems(searchTerm, libraryFilter, typeFilter) {
			// Clear current state
			this.renderedItems.clear();
			this.currentPage = 1;
			this.hasMoreData = true;

			// Apply filters
			this.filteredItems = this.allItems.filter(item => {
				const matchesSearch = !searchTerm ||
					item.title.toLowerCase().includes(searchTerm.toLowerCase());
				const matchesLibrary = !libraryFilter || item.library === libraryFilter;
				const matchesType = !typeFilter || item.type === typeFilter;
				return matchesSearch && matchesLibrary && matchesType;
			});

			// Re-render with new filtered data
			this.clearGrid();
			this.renderInitialBatch();

			// Update has more data status
			this.hasMoreData = this.filteredItems.length > this.batchSize;
		}

		setupSearch() {
			const searchInput = document.getElementById('request-search');
			const libraryFilter = document.getElementById('request-library-filter');
			const typeFilter = document.getElementById('request-type-filter');
			const sortSelect = document.getElementById('request-sort-by');

			if (this.options.enableSearch && searchInput) {
				let searchTimeout;
				searchInput.addEventListener('input', (e) => {
					clearTimeout(searchTimeout);
					searchTimeout = setTimeout(() => {
						this.handleFilters();
					}, 300); // Debounce search
				});
			}

			if (this.options.enableFilters && libraryFilter) {
				libraryFilter.addEventListener('change', () => this.handleFilters());
			}

			if (typeFilter) {
				typeFilter.addEventListener('change', () => this.handleFilters());
			}

			if (this.options.enableSorting && sortSelect) {
				sortSelect.addEventListener('change', (e) => this.sortItems(e.target.value));
			}
		}

		handleFilters() {
			const searchTerm = this.options.enableSearch ? (document.getElementById('request-search')?.value || '') : '';
			const libraryFilter = this.options.enableFilters ? (document.getElementById('request-library-filter')?.value || '') : '';
			const typeFilter = document.getElementById('request-type-filter')?.value || '';
			this.filterItems(searchTerm, libraryFilter, typeFilter);
		}

		// Admin action handlers for keep requests
		handleItemAction(mediaId, action, cardElement) {
			if (!cardElement) {
				console.warn('No card element provided for action:', action);
				return Promise.resolve();
			}

			// Use direct API calls instead of global functions to avoid button ID conflicts
			let apiPromise;
			switch (action) {
				case 'accept':
					apiPromise = window.makeApiRequestEnhanced(`/admin/api/keep-requests/${mediaId}/accept`, {
						method: 'POST',
						showProgress: true
					});
					break;
				case 'decline':
					apiPromise = window.makeApiRequestEnhanced(`/admin/api/keep-requests/${mediaId}/decline`, {
						method: 'POST',
						showProgress: true
					});
					break;
				default:
					console.warn('Unknown action:', action);
					return Promise.resolve();
			}

			return apiPromise.then(data => {
				if (data && data.success) {
					// Show success toast and update pending count
					if (window.showToast) {
						const actionText = action === 'accept' ? 'accepted' : 'declined';
						window.showToast(`Keep request ${actionText} successfully`, 'success');
					}
					if (window.updatePendingCount) {
						window.updatePendingCount(-1);
					}

					// Use the base class removeItem method which handles both data removal and animation
					const animationType = action === 'accept' ? 'swipe-right' : 'swipe-left';
					return this.removeItem(mediaId, animationType);
				} else {
					throw new Error(data?.error || 'Unknown error');
				}
			}).catch(error => {
				console.error('Action failed:', error);
				if (window.showToast) {
					window.showToast(`Failed to ${action} request: ${error.message}`, 'error');
				}
				// Don't remove the card if the API call failed
				throw error;
			});
		}

		// Set button to loading state using global function
		setButtonLoading(button, loadingText) {
			if (!button) return null;

			// Ensure button has an ID for the global function
			if (!button.id) {
				button.id = 'btn-' + Math.random().toString(36).substr(2, 9);
			}

			// Use global setButtonLoading function
			return window.setButtonLoading(button.id, loadingText);
		}

		// Reset button using global function
		resetButton(button, originalContent) {
			if (!button || !button.id) return;

			// Use global restoreButton function
			window.restoreButton(button.id, originalContent);
		}

		formatRelativeTime(date) {
			const now = new Date();
			const diffInMs = date.getTime() - now.getTime();
			const diffInDays = Math.ceil(diffInMs / (1000 * 60 * 60 * 24));

			if (diffInDays === 0) return 'today';
			if (diffInDays === 1) return 'tomorrow';
			if (diffInDays > 1) return `in ${diffInDays} days`;
			if (diffInDays === -1) return 'yesterday';
			return `${Math.abs(diffInDays)} days ago`;
		}

		// Override setItems to handle keep request data format
		setItems(mediaRequests) {
			// Transform MediaRequest objects to MediaItem format
			const transformedItems = mediaRequests.map(request => {
				// Check if data is already in client format (has deletionTimestamp)
				// vs database.Media format (has DefaultDeleteAt)
				let deletionTimestamp;
				if (request.deletionTimestamp !== undefined) {
					// Already in client format, use as-is
					deletionTimestamp = request.deletionTimestamp;
				} else if (request.DefaultDeleteAt) {
					// database.Media format, convert to timestamp
					deletionTimestamp = new Date(request.DefaultDeleteAt).getTime();
				} else {
					// No deletion date available
					deletionTimestamp = 0;
				}

				return {
					id: request.ID || request.id, // database.Media uses ID not MediaID
					title: request.Title || request.title,
					type: request.MediaType || request.type, // database.Media uses MediaType
					year: request.Year || request.year,
					library: request.LibraryName, // database.Media uses LibraryName
					posterURL: request.PosterURL || request.posterURL,
					deletionTimestamp: deletionTimestamp,
					canRequest: false,
					hasRequested: true,
					mustDelete: false,
					fileSize: request.FileSize || 0, // Include file size from database.Media
					cleanupMode: "",
					keepCount: 0
				};
			});

			// Call parent setItems with transformed data
			this.allItems = transformedItems || [];
			this.filteredItems = [...this.allItems];
			this.renderedItems.clear();
			this.currentPage = 1;
			this.hasMoreData = this.filteredItems.length > this.batchSize;

			// Clear grid and render initial batch (handleFilters will call renderInitialBatch too)
			this.clearGrid();
			this.renderInitialBatch();
		}

		// Refresh method to update grid with current data
		refresh() {
			this.clearGrid();
			this.currentPage = 1;
			this.hasMoreData = true;

			setTimeout(() => {
				this.renderInitialBatch();
			}, 0);

			this.hasMoreData = this.filteredItems.length > this.batchSize;
		}
	}

	// Export for admin use
	window.AdminKeepRequestGridManager = AdminKeepRequestGridManager;

	// Initialize admin keep request grid when DOM loads
	document.addEventListener('DOMContentLoaded', function() {
		if (document.getElementById('approval-queue-container')) {
			window.adminKeepRequestGridManager = new AdminKeepRequestGridManager('approval-queue-container', {
				gridId: 'approval-queue-grid',
				enableSearch: true,
				enableFilters: true,
				enableSorting: true,
				enableRefresh: true,
				pageSize: 10,
				mobilePageSize: 4,
				animateChanges: true
			});
		}
	});
}

script AdminMediaGridScript() {
	class AdminMediaGridManager extends MediaGridManager {
		constructor(containerId, options = {}) {
			super(containerId, options);
		}

		loadMediaItemsFromDOM() {
			// Add a small delay to ensure DOM and data attributes are fully ready
			setTimeout(() => {
				this.doLoadMediaItemsFromDOM();
			}, 0);
		}

		doLoadMediaItemsFromDOM() {
			try {
				// Ensure the grid element exists and has data
				if (!this.grid) {
					console.warn('Grid element not found, retrying...');
					setTimeout(() => this.doLoadMediaItemsFromDOM(), 50);
					return;
				}

				const mediaItemsData = this.grid.dataset.mediaItems;
				if (!mediaItemsData) {
					console.warn('No media items data found in grid element, retrying...');
					// Retry a few times in case the data attribute is still being set
					if (!this.retryCount) this.retryCount = 0;
					if (this.retryCount < 5) {
						this.retryCount++;
						setTimeout(() => this.doLoadMediaItemsFromDOM(), 100);
						return;
					}
					console.warn('Failed to load media items data after retries');
					this.setItems([]);
					return;
				}

				const rawMediaItems = JSON.parse(mediaItemsData);
				// Transform database.Media to JavaScript-friendly format
				const transformedItems = rawMediaItems.map(item => ({
					id: item.ID,
					title: item.Title,
					type: item.MediaType, // database.Media uses MediaType
					year: item.Year,
					library: item.LibraryName, // database.Media uses LibraryName
					posterURL: item.PosterURL,
					deletionTimestamp: item.DefaultDeleteAt ? new Date(item.DefaultDeleteAt).getTime() : 0, // database.Media uses DefaultDeleteAt
					fileSize: item.FileSize || 0,
					hasRequested: !!(item.Request && item.Request.ID), // Check if Request exists and has ID
					canRequest: !item.Unkeepable, // database.Media uses Unkeepable (inverted logic)
					mustDelete: item.Unkeepable || false, // Unkeepable means it must be deleted
					cleanupMode: "", // TODO: Add if needed
					keepCount: 0 // TODO: Add if needed
				}));
				this.setItems(transformedItems);
			} catch (error) {
				console.error('Failed to parse media items data:', error);
				this.setItems([]);
			}
		}

		createCardElement(item) {
			const div = document.createElement('div');
			div.className = 'media-card';
			div.id = `media-${item.id}`;
			div.setAttribute('data-media-id', item.id);
			div.setAttribute('data-item-id', item.id);
			div.setAttribute('data-title', item.title);
			div.setAttribute('data-library', item.library);
			div.setAttribute('data-type', item.type);
			div.setAttribute('data-status', this.getItemStatus(item));

			// Use the admin-specific card HTML for media items
			div.innerHTML = this.createAdminMediaCardHTML(item);

			// Use event delegation on the card div instead of finding individual buttons
			div.addEventListener('click', (e) => {
				e.preventDefault();
				const target = e.target.closest('button');
				if (!target) return;

				const mediaId = target.getAttribute('data-media-id');
				// Use loose equality to handle string vs number comparison
				if (mediaId != item.id) return;

				if (target.classList.contains('keep-btn')) {
					const originalContent = this.setButtonLoading(target, 'Keeping...');
					this.handleItemAction(item.id, 'keep', div).catch(() => {
						this.resetButton(target, originalContent);
					});
				} else if (target.classList.contains('keep-forever-btn')) {
					const originalContent = this.setButtonLoading(target, 'Keeping...');
					this.handleItemAction(item.id, 'keep-forever', div).catch(() => {
						this.resetButton(target, originalContent);
					});
				} else if (target.classList.contains('delete-btn')) {
					const originalContent = this.setButtonLoading(target, 'Sweeping...');
					this.handleItemAction(item.id, 'sweep', div).catch(() => {
						this.resetButton(target, originalContent);
					});
				}
			});

			return div;
		}

		getItemStatus(item) {
			if (item.hasRequested) return 'requested';
			if (item.mustDelete) return 'must-delete';
			return 'normal';
		}

		createAdminMediaCardHTML(item) {
			const formattedSize = this.formatFileSize(item.fileSize);
			const deletionDate = new Date(item.deletionTimestamp);
			const relativeTime = this.formatRelativeTime(deletionDate);

			const posterImg = item.posterURL
				? `<img src="${item.posterURL}" class="w-full h-64 object-cover" loading="lazy"/>`
				: `<div class="w-full h-64 bg-gray-700 flex items-center justify-center">
					<svg class="w-16 h-16 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 011 1v2a1 1 0 01-1 1h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8H3a1 1 0 01-1-1V5a1 1 0 011-1h3z"></path>
					</svg>
				</div>`;

			return `
				<!-- Desktop Card Layout -->
				<div class="hidden sm:block">
					<div class="card h-full flex flex-col">
						<div class="aspect-w-2 aspect-h-3 bg-gray-800 overflow-hidden rounded-t-lg">
							${posterImg}
						</div>
						<div class="p-4 flex-1 flex flex-col">
							<div class="flex-1">
								<h3 class="text-lg font-semibold text-gray-100 truncate">${item.title}</h3>
								<div class="flex items-center space-x-2 mt-1">
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
										${item.type}
									</span>
									${item.year > 0 ? `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-600 text-gray-300">${item.year}</span>` : ''}
								</div>
								<div class="mt-3 space-y-2">
									<div class="flex flex-wrap items-center gap-2 text-sm text-gray-400">
										<div class="flex items-center">
											<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
											</svg>
											${item.library}
										</div>
										<div class="flex items-center">
											<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
											</svg>
											${formattedSize}
										</div>
									</div>
									<div class="flex items-center text-sm text-red-400">
										<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										Deletes ${relativeTime}
									</div>
								</div>
								<div class="mt-3 flex flex-wrap items-center gap-2">
									${item.hasRequested && !item.mustDelete ? `
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-900 text-yellow-200">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										Keep Requested
									</span>
									` : item.mustDelete ? `
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-900 text-red-200">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
										Must Delete
									</span>
									` : `
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										No Request
									</span>
									`}
								</div>
							</div>
							<div class="mt-4 flex flex-col gap-2">
								<button
									id="keep-desktop-${item.id}"
									data-media-id="${item.id}"
									class="admin-action-btn keep-btn w-full inline-flex items-center justify-center px-3 py-2 rounded-lg font-medium transition-colors duration-200 text-sm"
									style="background-color: #16a34a; color: white;"
									onmouseover="this.style.backgroundColor='#15803d'"
									onmouseout="this.style.backgroundColor='#16a34a'"
								>
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
									</svg>
									Keep
								</button>
								<button
									id="keep-forever-desktop-${item.id}"
									data-media-id="${item.id}"
									class="admin-action-btn keep-forever-btn w-full inline-flex items-center justify-center px-3 py-2 rounded-lg font-medium transition-colors duration-200 text-sm"
									style="background-color: #4f46e5; color: white;"
									onmouseover="this.style.backgroundColor='#3730a3'"
									onmouseout="this.style.backgroundColor='#4f46e5'"
								>
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
									</svg>
									Keep Forever
								</button>
								<button
									id="delete-desktop-${item.id}"
									data-media-id="${item.id}"
									class="admin-action-btn delete-btn w-full inline-flex items-center justify-center px-3 py-2 rounded-lg font-medium transition-colors duration-200 text-sm"
									style="background-color: #dc2626; color: white;"
									onmouseover="this.style.backgroundColor='#b91c1c'"
									onmouseout="this.style.backgroundColor='#dc2626'"
								>
									<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
									</svg>
									Sweep
								</button>
							</div>
						</div>
					</div>
				</div>

				<!-- Mobile Horizontal Layout -->
				<div class="block sm:hidden">
					<div class="card">
						<div class="flex items-center p-4 gap-4">
							<div class="shrink-0">
								${item.posterURL
									? `<img src="${item.posterURL}" alt="${item.title}" class="w-16 h-24 object-cover rounded" loading="lazy"/>`
									: `<div class="w-16 h-24 bg-gray-700 rounded flex items-center justify-center">
										<svg class="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 011 1v2a1 1 0 01-1 1h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8H3a1 1 0 01-1-1V5a1 1 0 011-1h3z"></path>
										</svg>
									</div>`
								}
							</div>
							<div class="flex-1 min-w-0">
								<h4 class="text-lg font-medium text-gray-100 truncate">${item.title}</h4>
								<div class="mt-1 flex flex-wrap items-center gap-2 text-sm text-gray-400">
									<div class="flex items-center">
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
										</svg>
										${item.library}
									</div>
									<div class="flex items-center">
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
										</svg>
										${formattedSize}
									</div>
									<div class="flex items-center text-red-400">
										<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										Deletes ${relativeTime}
									</div>
								</div>
								<div class="mt-2 flex flex-wrap items-center gap-2">
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
										${item.type}
									</span>
									${item.year > 0 ? `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-600 text-gray-300">${item.year}</span>` : ''}
									${item.hasRequested && !item.mustDelete ? `
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-900 text-yellow-200">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										Keep Requested
									</span>
									` : item.mustDelete ? `
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-900 text-red-200">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
										Must Delete
									</span>
									` : `
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.228 9c.549-1.165 2.03-2 3.772-2 2.21 0 4 1.343 4 3 0 1.4-1.278 2.575-3.006 2.907-.542.104-.994.54-.994 1.093m0 3h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
										</svg>
										No Request
									</span>
									`}
								</div>
								<div class="mt-3 flex gap-2">
									<button
										id="keep-mobile-${item.id}"
										data-media-id="${item.id}"
										class="admin-action-btn keep-btn flex-1 inline-flex items-center justify-center px-2 py-2 rounded-lg font-medium transition-colors duration-200 text-xs"
										style="background-color: #16a34a; color: white;"
										onmouseover="this.style.backgroundColor='#15803d'"
										onmouseout="this.style.backgroundColor='#16a34a'"
									>
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
										</svg>
										Keep
									</button>
									<button
										id="keep-forever-mobile-${item.id}"
										data-media-id="${item.id}"
										class="admin-action-btn keep-forever-btn flex-1 inline-flex items-center justify-center px-2 py-2 rounded-lg font-medium transition-colors duration-200 text-xs"
										style="background-color: #4f46e5; color: white;"
										onmouseover="this.style.backgroundColor='#3730a3'"
										onmouseout="this.style.backgroundColor='#4f46e5'"
									>
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
										</svg>
										Forever
									</button>
									<button
										id="delete-mobile-${item.id}"
										data-media-id="${item.id}"
										class="admin-action-btn delete-btn flex-1 inline-flex items-center justify-center px-2 py-2 rounded-lg font-medium transition-colors duration-200 text-xs"
										style="background-color: #dc2626; color: white;"
										onmouseover="this.style.backgroundColor='#b91c1c'"
										onmouseout="this.style.backgroundColor='#dc2626'"
									>
										<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
										</svg>
										Sweep
									</button>
								</div>
							</div>
						</div>
					</div>
				</div>
			`;
		}

		// Override filtering to include status filter
		filterItems(searchTerm, libraryFilter, typeFilter, statusFilter) {
			// Clear current state
			this.renderedItems.clear();
			this.currentPage = 1;
			this.hasMoreData = true;

			// Apply filters
			this.filteredItems = this.allItems.filter(item => {
				const matchesSearch = !searchTerm ||
					item.title.toLowerCase().includes(searchTerm.toLowerCase());
				const matchesLibrary = !libraryFilter || item.library === libraryFilter;
				const matchesType = !typeFilter || item.type === typeFilter;

				let matchesStatus = true;
				if (statusFilter) {
					switch (statusFilter) {
						case 'requested':
							matchesStatus = item.hasRequested && !item.mustDelete;
							break;
						case 'must-delete':
							matchesStatus = item.mustDelete;
							break;
						case 'normal':
							matchesStatus = !item.hasRequested && !item.mustDelete;
							break;
					}
				}

				return matchesSearch && matchesLibrary && matchesType && matchesStatus;
			});

			// Re-render with new filtered data
			this.clearGrid();
			this.renderInitialBatch();

			// Update has more data status
			this.hasMoreData = this.filteredItems.length > this.batchSize;
		}

		setupSearch() {
			const searchInput = document.getElementById('media-search');
			const libraryFilter = document.getElementById('media-library-filter');
			const typeFilter = document.getElementById('media-type-filter');
			const statusFilter = document.getElementById('media-status-filter');
			const sortSelect = document.getElementById('media-sort-by');

			if (this.options.enableSearch && searchInput) {
				let searchTimeout;
				searchInput.addEventListener('input', (e) => {
					clearTimeout(searchTimeout);
					searchTimeout = setTimeout(() => {
						this.handleFilters();
					}, 300); // Debounce search
				});
			}

			if (this.options.enableFilters && libraryFilter) {
				libraryFilter.addEventListener('change', () => this.handleFilters());
			}

			if (typeFilter) {
				typeFilter.addEventListener('change', () => this.handleFilters());
			}

			if (statusFilter) {
				statusFilter.addEventListener('change', () => this.handleFilters());
			}

			if (this.options.enableSorting && sortSelect) {
				sortSelect.addEventListener('change', (e) => this.sortItems(e.target.value));
			}
		}

		handleFilters() {
			const searchTerm = this.options.enableSearch ? (document.getElementById('media-search')?.value || '') : '';
			const libraryFilter = this.options.enableFilters ? (document.getElementById('media-library-filter')?.value || '') : '';
			const typeFilter = document.getElementById('media-type-filter')?.value || '';
			const statusFilter = document.getElementById('media-status-filter')?.value || '';
			this.filterItems(searchTerm, libraryFilter, typeFilter, statusFilter);
		}

		// Admin action handlers for media items
		handleItemAction(mediaId, action, cardElement) {
			if (!cardElement) {
				console.warn('No card element provided for action:', action);
				return Promise.resolve();
			}

			// Use direct API calls instead of global functions to avoid button ID conflicts
			let apiPromise;
			switch (action) {
				case 'keep':
					apiPromise = window.makeApiRequestEnhanced(`/admin/api/media/${mediaId}/keep`, {
						method: 'POST',
						showProgress: true
					});
					break;
				case 'keep-forever':
					apiPromise = window.makeApiRequestEnhanced(`/admin/api/media/${mediaId}/keep-forever`, {
						method: 'POST',
						showProgress: true
					});
					break;
				case 'sweep':
					apiPromise = window.makeApiRequestEnhanced(`/admin/api/media/${mediaId}/delete`, {
						method: 'POST',
						showProgress: true
					});
					break;
				default:
					console.warn('Unknown action:', action);
					return Promise.resolve();
			}

			return apiPromise.then(data => {
				if (data && data.success) {
					// Show success toast
					const actionText = {
						'keep': 'marked as keep',
						'keep-forever': 'protected forever',
						'sweep': 'marked for deletion'
					}[action];
					if (window.showToast) {
						window.showToast(`Media ${actionText} successfully`, 'success');
					}

					// Use the base class removeItem method which handles both data removal and animation
					let animationType;
					switch (action) {
						case 'keep':
							animationType = 'swipe-right';
							break;
						case 'keep-forever':
							animationType = 'fly-up';
							break;
						case 'sweep':
							animationType = 'swipe-left';
							break;
						default:
							animationType = 'default';
					}
					return this.removeItem(mediaId, animationType);
				} else {
					throw new Error(data?.error || 'Unknown error');
				}
			}).catch(error => {
				console.error('Action failed:', error);
				if (window.showToast) {
					window.showToast(`Failed to ${action} media: ${error.message}`, 'error');
				}
				// Don't remove the card if the API call failed
				throw error;
			});
		}

		// Set button to loading state using global function
		setButtonLoading(button, loadingText) {
			if (!button) return null;

			// Ensure button has an ID for the global function
			if (!button.id) {
				button.id = 'btn-' + Math.random().toString(36).substr(2, 9);
			}

			// Use global setButtonLoading function
			return window.setButtonLoading(button.id, loadingText);
		}

		// Reset button using global function
		resetButton(button, originalContent) {
			if (!button || !button.id) return;

			// Use global restoreButton function
			window.restoreButton(button.id, originalContent);
		}

		formatFileSize(bytes) {
			if (bytes === 0) return '0 Bytes';
			const k = 1024;
			const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
			const i = Math.floor(Math.log(bytes) / Math.log(k));
			return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
		}

		formatRelativeTime(date) {
			const now = new Date();
			const diffInMs = date.getTime() - now.getTime();
			const diffInDays = Math.ceil(diffInMs / (1000 * 60 * 60 * 24));

			if (diffInDays === 0) return 'today';
			if (diffInDays === 1) return 'tomorrow';
			if (diffInDays > 1) return `in ${diffInDays} days`;
			if (diffInDays === -1) return 'yesterday';
			return `${Math.abs(diffInDays)} days ago`;
		}

		// Override setItems to handle media item data format
		setItems(mediaItems) {
			// Transform database.Media to client format
			const clientItems = mediaItems.map(item => {
				// Check if data is already in client format (has deletionTimestamp)
				// vs database.Media format (has DefaultDeleteAt)
				let deletionTimestamp;
				if (item.deletionTimestamp !== undefined) {
					// Already in client format, use as-is
					deletionTimestamp = item.deletionTimestamp;
				} else if (item.DefaultDeleteAt) {
					// database.Media format, convert to timestamp
					deletionTimestamp = new Date(item.DefaultDeleteAt).getTime();
				} else {
					// No deletion date available
					deletionTimestamp = 0;
				}

				return {
					...item,
					id: item.ID || item.id,
					title: item.Title || item.title,
					library: item.LibraryName || item.library, // database.Media uses LibraryName
					posterURL: item.PosterURL || item.posterURL,
					fileSize: parseInt(item.FileSize || item.fileSize || 0),
					deletionTimestamp: deletionTimestamp,
					hasRequested: !!(item.Request && item.Request.ID) || !!item.hasRequested, // Check if Request exists and has ID
					canRequest: !item.Unkeepable && (item.canRequest !== false), // database.Media uses Unkeepable (inverted)
					mustDelete: item.Unkeepable || item.mustDelete || false,
					cleanupMode: item.cleanupMode || "",
					keepCount: parseInt(item.keepCount || 0),
					type: item.MediaType || item.type, // database.Media uses MediaType
					year: parseInt(item.Year || item.year || 0)
				};
			});

			// Call parent setItems with transformed data
			this.allItems = clientItems || [];
			this.filteredItems = [...this.allItems];
			this.renderedItems.clear();
			this.currentPage = 1;
			this.hasMoreData = this.filteredItems.length > this.batchSize;

			// Clear grid and render initial batch (handleFilters will call renderInitialBatch too)
			this.clearGrid();
			this.renderInitialBatch();
		}

		// Refresh method to update grid with current data
		refresh() {
			this.clearGrid();
			this.currentPage = 1;
			this.hasMoreData = true;

			setTimeout(() => {
				this.renderInitialBatch();

			}, 0);

			this.hasMoreData = this.filteredItems.length > this.batchSize;
		}
	}

	// Export for admin use
	window.AdminMediaGridManager = AdminMediaGridManager;

	// Initialize admin media grid when DOM loads
	document.addEventListener('DOMContentLoaded', function() {
		if (document.getElementById('keep-sweep-container')) {
			window.adminMediaGridManager = new AdminMediaGridManager('keep-sweep-container', {
				gridId: 'keep-sweep-grid',
				enableSearch: true,
				enableFilters: true,
				enableSorting: true,
				enableRefresh: true,
				pageSize: 10,
				mobilePageSize: 4,
				animateChanges: true
			});
		}
	});
}
