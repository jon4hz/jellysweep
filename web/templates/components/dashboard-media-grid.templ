package components

import "github.com/jon4hz/jellysweep/api/models"

// DashboardMediaGrid creates a media grid specifically for the dashboard
templ DashboardMediaGrid(mediaItems []models.MediaItem, pageSize int) {
	@MediaGrid(mediaItems, MediaGridConfig{
		ContainerID:    "media-grid-container",
		GridID:         "media-grid",
		EnableSearch:   true,
		EnableFilters:  true,
		EnableSorting:  true,
		EnableRefresh:  true,
		PageSize:       pageSize,
		MobilePageSize: 6,
		AnimateChanges: true,
	}, DashboardFilters(mediaItems))
}

// DashboardFilters creates the filter interface for the dashboard
templ DashboardFilters(mediaItems []models.MediaItem) {
	<div class="card-no-hover p-4 sm:p-6 mb-6">
		<div class="flex flex-col space-y-4 lg:space-y-0 lg:flex-row lg:items-center lg:justify-between">
			<div class="flex flex-col space-y-4 sm:space-y-0 sm:flex-row sm:flex-wrap sm:items-center sm:gap-4">
				<div class="relative flex-1 sm:flex-none">
					<input type="text" id="search" placeholder="Search media..." class="input-field pl-10 pr-4 py-2 w-full sm:w-64"/>
					<div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
						<svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
						</svg>
					</div>
				</div>
				<select id="library-filter" class="input-field flex-1 sm:flex-none">
					<option value="">All Libraries</option>
					for _, library := range GetUniqueLibraries(mediaItems) {
						<option value={ library }>{ library }</option>
					}
				</select>
				<select id="request-status-filter" class="input-field flex-1 sm:flex-none">
					<option value="unrequested" selected>Unrequested</option>
					<option value="requested">Requested</option>
					<option value="unavailable">Unavailable</option>
					<option value="">All Items</option>
				</select>
				<select id="sort-by" class="input-field flex-1 sm:flex-none">
					<option value="deletion-date-asc">Deletion Date (Earliest First)</option>
					<option value="deletion-date-desc">Deletion Date (Latest First)</option>
					<option value="title-asc">Title (A-Z)</option>
					<option value="title-desc">Title (Z-A)</option>
					<option value="size-asc">File Size (Smallest First)</option>
					<option value="size-desc">File Size (Largest First)</option>
				</select>
			</div>
			<div class="flex items-center">
				<button id="refresh-btn" class="flex items-center justify-center btn-secondary w-full sm:w-auto">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
					</svg>
					Refresh
				</button>
			</div>
		</div>
	</div>
}

script DashboardMediaGridScript() {
	class DashboardMediaGridManager extends MediaGridManager {
		constructor(containerId, options = {}) {
			super(containerId, options);
		}

		loadMediaItemsFromDOM() {
			// Add a small delay to ensure DOM and data attributes are fully ready
			setTimeout(() => {
				this.doLoadMediaItemsFromDOM();
			}, 0);
		}

		doLoadMediaItemsFromDOM() {
			try {
				// Ensure the grid element exists and has data
				if (!this.grid) {
					console.warn('Grid element not found, retrying...');
					setTimeout(() => this.doLoadMediaItemsFromDOM(), 50);
					return;
				}

				const mediaItemsData = this.grid.dataset.mediaItems;
				if (!mediaItemsData) {
					console.warn('No media items data found in grid element, retrying...');
					// Retry a few times in case the data attribute is still being set
					if (!this.retryCount) this.retryCount = 0;
					if (this.retryCount < 5) {
						this.retryCount++;
						setTimeout(() => this.doLoadMediaItemsFromDOM(), 100);
						return;
					}
					console.warn('Failed to load media items data after retries');
					this.setItems([]);
					return;
				}

				const rawMediaItems = JSON.parse(mediaItemsData);
				// Transform Go struct field names to JavaScript-friendly names
				const transformedItems = rawMediaItems.map(item => ({
					id: item.ID,
					title: item.Title,
					type: item.Type,
					year: item.Year,
					library: item.Library,
					posterURL: item.PosterURL,
					deletionTimestamp: item.DeletionDate ? new Date(item.DeletionDate).getTime() : 0,
					fileSize: item.FileSize || 0,
					hasRequested: item.HasRequested || false,
					canRequest: item.CanRequest !== false, // Default to true unless explicitly false
					mustDelete: item.MustDelete || false,
					cleanupMode: item.CleanupMode || "",
					keepCount: item.KeepCount || 0
				}));
				this.setItems(transformedItems);
			} catch (error) {
				console.error('Failed to parse media items data:', error);
				this.setItems([]);
			}
		}

		// Override init to ensure dashboard filters are applied on startup
		init() {
			// Call parent init first
			super.init();

			// Apply dashboard-specific filters after initialization
			setTimeout(() => {
				this.handleFilters();
			}, 10); // Small delay to ensure DOM is ready
		}

		createCardElement(item) {
			const div = document.createElement('div');
			div.className = 'media-card';
			div.setAttribute('data-title', item.title);
			div.setAttribute('data-deletion-timestamp', item.deletionTimestamp);
			div.setAttribute('data-library', item.library);
			div.setAttribute('data-size', item.fileSize);

			// Use the dashboard-specific card HTML
			div.innerHTML = this.createDashboardCardHTML(item);
			return div;
		}

		createDashboardCardHTML(item) {
			const formattedSize = this.formatFileSize(item.fileSize);
			const deletionDate = new Date(item.deletionTimestamp);
			const relativeTime = this.formatRelativeTime(deletionDate);

			const posterImg = item.posterURL
				? `<img src="${item.posterURL}" class="w-full h-64 object-cover" loading="lazy"/>`
				: `<div class="w-full h-64 bg-gray-800 flex items-center justify-center">
					<svg class="w-16 h-16 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 011 1v2a1 1 0 01-1 1h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8H3a1 1 0 01-1-1V5a1 1 0 011-1h3z"></path>
					</svg>
				</div>`;

			// Generate cleanup mode pills
			let cleanupPillHTML = '';
			if (item.cleanupMode && item.cleanupMode !== 'all') {
				if (item.cleanupMode === 'keep_episodes') {
					const episodeText = item.keepCount === 1 ? 'Episode' : 'Episodes';
					const tooltip = this.getEpisodeTooltipText(item.keepCount);
					cleanupPillHTML = `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-600 text-blue-100" title="${tooltip}">
						<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
						</svg>
						Keep ${item.keepCount} ${episodeText}
					</span>`;
				} else if (item.cleanupMode === 'keep_seasons') {
					const seasonText = item.keepCount === 1 ? 'Season' : 'Seasons';
					const tooltip = this.getSeasonTooltipText(item.keepCount);
					cleanupPillHTML = `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-600 text-blue-100" title="${tooltip}">
						<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
						</svg>
						Keep ${item.keepCount} ${seasonText}
					</span>`;
				} else {
					const tooltip = `Cleanup mode: ${item.cleanupMode}`;
					cleanupPillHTML = `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-blue-600 text-blue-100" title="${tooltip}">
						<svg class="w-3 h-3 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
						${item.cleanupMode}
					</span>`;
				}
			}

			const buttonContent = item.hasRequested
				? `<span class="w-full flex items-center justify-center btn-secondary opacity-50 cursor-not-allowed">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
					Request Submitted
				</span>`
				: item.canRequest && !item.mustDelete
				? `<button id="keep-btn-desktop-${item.id}" data-media-id="${item.id}" class="w-full flex items-center justify-center btn-primary active:scale-95 active:bg-indigo-700 transition-all duration-150 ease-out touch-manipulation">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
					</svg>
					${item.cleanupMode && item.cleanupMode !== 'all' ? 'Request to Keep All' : 'Request to Keep'}
				</button>`
				: `<button disabled class="w-full flex items-center justify-center btn-secondary opacity-50 cursor-not-allowed">
					Request Unavailable
				</button>`;

			const mobileButtonContent = item.hasRequested
				? `<span class="w-full flex items-center justify-center btn-secondary opacity-50 cursor-not-allowed">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
					</svg>
					Request Submitted
				</span>`
				: item.canRequest && !item.mustDelete
				? `<button id="keep-btn-mobile-${item.id}" data-media-id="${item.id}" class="w-full flex items-center justify-center btn-primary active:scale-95 active:bg-indigo-700 transition-all duration-150 ease-out touch-manipulation">
					<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"></path>
					</svg>
					${item.cleanupMode && item.cleanupMode !== 'all' ? 'Request to Keep All' : 'Request to Keep'}
				</button>`
				: `<button disabled class="w-full flex items-center justify-center btn-secondary opacity-50 cursor-not-allowed">
					Request Unavailable
				</button>`;

			return `
				<!-- Desktop Grid Layout -->
				<div class="hidden sm:block">
					<div class="aspect-w-2 aspect-h-3 bg-gray-800 overflow-hidden rounded-t-lg">
						${posterImg}
					</div>
					<div class="p-4">
						<div class="flex items-start justify-between">
							<div class="flex-1 min-w-0">
								<h3 class="text-lg font-semibold text-gray-100 truncate">${item.title}</h3>
								<div class="flex items-center space-x-2 mt-1">
									<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
										${item.type}
									</span>
									${item.year ? `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-600 text-gray-300">${item.year}</span>` : ''}
									${cleanupPillHTML}
								</div>
							</div>
						</div>
						<div class="mt-3 space-y-2">
							<div class="flex items-center text-sm text-gray-400">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
								</svg>
								${item.library}
							</div>
							<div class="flex items-center text-sm text-gray-400">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
								</svg>
								${formattedSize}
							</div>
							<div class="flex items-center text-sm text-red-400">
								<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
									<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
								</svg>
								Deletes ${relativeTime}
							</div>
						</div>
						<div class="mt-4">
							${buttonContent}
						</div>
					</div>
				</div>

				<!-- Mobile Horizontal Layout -->
				<div class="block sm:hidden">
					<div class="flex items-center p-4 gap-4">
						<div class="shrink-0">
							${item.posterURL
								? `<img src="${item.posterURL}" alt="${item.title}" class="w-16 h-24 object-cover rounded" loading="lazy"/>`
								: `<div class="w-16 h-24 bg-gray-700 rounded flex items-center justify-center">
									<svg class="w-8 h-8 text-gray-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h3a1 1 0 011 1v2a1 1 0 01-1 1h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V8H3a1 1 0 01-1-1V5a1 1 0 011-1h3z"></path>
									</svg>
								</div>`
							}
						</div>
						<div class="flex-1 min-w-0">
							<h4 class="text-lg font-medium text-gray-100 truncate">${item.title}</h4>
							<div class="mt-1 flex flex-wrap items-center gap-2 text-sm text-gray-400">
								<div class="flex items-center">
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
									</svg>
									${item.library}
								</div>
								<div class="flex items-center">
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
									</svg>
									${formattedSize}
								</div>
								<div class="flex items-center text-red-400">
									<svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
									</svg>
									Deletes ${relativeTime}
								</div>
							</div>
							<div class="mt-2 flex flex-wrap items-center gap-2">
								<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-700 text-gray-300">
									${item.type}
								</span>
								${item.year ? `<span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-600 text-gray-300">${item.year}</span>` : ''}
								${cleanupPillHTML}
							</div>
							<div class="mt-3">
								${mobileButtonContent}
							</div>
						</div>
					</div>
				</div>
			`;
		}

		formatFileSize(bytes) {
			if (bytes === 0) return '0 Bytes';
			const k = 1024;
			const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
			const i = Math.floor(Math.log(bytes) / Math.log(k));
			return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
		}

		formatRelativeTime(date) {
			const now = new Date();
			const diffInMs = date.getTime() - now.getTime();
			const diffInDays = Math.ceil(diffInMs / (1000 * 60 * 60 * 24));

			if (diffInDays === 0) return 'today';
			if (diffInDays === 1) return 'tomorrow';
			if (diffInDays > 1) return `in ${diffInDays} days`;
			if (diffInDays === -1) return 'yesterday';
			return `${Math.abs(diffInDays)} days ago`;
		}

		getEpisodeTooltipText(keepCount) {
			if (keepCount <= 0) {
				return "Unless requested otherwise, Jellysweep will delete all episodes.";
			}
			if (keepCount === 1) {
				return "Unless requested otherwise, Jellysweep will delete everything except the first episode.";
			}

			// Use written numbers for small values
			let countText;
			switch (keepCount) {
				case 2: countText = "two"; break;
				case 3: countText = "three"; break;
				case 4: countText = "four"; break;
				case 5: countText = "five"; break;
				default: countText = keepCount.toString();
			}

			return `Unless requested otherwise, Jellysweep will delete everything except the first ${countText} episodes.`;
		}

		getSeasonTooltipText(keepCount) {
			if (keepCount <= 0) {
				return "Unless requested otherwise, Jellysweep will delete all seasons.";
			}
			if (keepCount === 1) {
				return "Unless requested otherwise, Jellysweep will delete everything except the first season.";
			}

			// Use written numbers for small values
			let countText;
			switch (keepCount) {
				case 2: countText = "two"; break;
				case 3: countText = "three"; break;
				case 4: countText = "four"; break;
				case 5: countText = "five"; break;
				default: countText = keepCount.toString();
			}

			return `Unless requested otherwise, Jellysweep will delete everything except the first ${countText} seasons.`;
		}

		// Override setupSearch to handle the dashboard-specific request status filter
		setupSearch() {
			const searchInput = document.getElementById('search');
			const libraryFilter = document.getElementById('library-filter');
			const requestStatusFilter = document.getElementById('request-status-filter');
			const sortSelect = document.getElementById('sort-by');

			if (searchInput) {
				let searchTimeout;
				searchInput.addEventListener('input', (e) => {
					clearTimeout(searchTimeout);
					searchTimeout = setTimeout(() => {
						this.handleFilters();
					}, 300); // Debounce search
				});
			}

			if (libraryFilter) {
				libraryFilter.addEventListener('change', () => this.handleFilters());
			}

			if (requestStatusFilter) {
				requestStatusFilter.addEventListener('change', () => this.handleFilters());
			}

			if (sortSelect) {
				sortSelect.addEventListener('change', (e) => this.sortItems(e.target.value));
			}
		}

		// Override handleFilters to include dashboard-specific request status filtering
		handleFilters() {
			const searchTerm = document.getElementById('search')?.value || '';
			const libraryFilter = document.getElementById('library-filter')?.value || '';
			const requestStatusFilter = document.getElementById('request-status-filter')?.value || '';
			this.filterItems(searchTerm, libraryFilter, requestStatusFilter);
		}

		// Override filterItems to handle the additional request status filter
		filterItems(searchTerm, libraryFilter, requestStatusFilter) {
			// Clear current state
			this.renderedItems.clear();
			this.currentPage = 1;
			this.hasMoreData = true;

			// Apply filters
			this.filteredItems = this.allItems.filter(item => {
				const matchesSearch = !searchTerm ||
					item.title.toLowerCase().includes(searchTerm.toLowerCase());
				const matchesLibrary = !libraryFilter || item.library === libraryFilter;

				// Filter by request status
				let matchesRequestStatus = true;
				if (requestStatusFilter) {
					switch (requestStatusFilter) {
						case 'unrequested':
							matchesRequestStatus = !item.hasRequested && item.canRequest && !item.mustDelete;
							break;
						case 'requested':
							matchesRequestStatus = item.hasRequested;
							break;
						case 'unavailable':
							matchesRequestStatus = !item.canRequest || item.mustDelete;
							break;
						default:
							matchesRequestStatus = true;
					}
				}

				const result = matchesSearch && matchesLibrary && matchesRequestStatus;
				return result;
			});

			// Re-render with new filtered data
			this.clearGrid();

			// Force a complete re-render by ensuring the grid is truly empty
			setTimeout(() => {
				this.renderInitialBatch();
			}, 0);

			// Update has more data status
			this.hasMoreData = this.filteredItems.length > this.batchSize;
		}

		// Refresh method to update grid with new data
		refresh() {
			// Re-render the grid with current filtered items
			this.clearGrid();
			this.currentPage = 1;
			this.hasMoreData = true;

			// Force a complete re-render
			setTimeout(() => {
				this.renderInitialBatch();
			}, 0);

			// Update has more data status
			this.hasMoreData = this.filteredItems.length > this.batchSize;
		}

		// Update items and refresh the grid
		setItems(newItems) {
			this.allItems = newItems || [];
			this.filteredItems = [...this.allItems];
			this.renderedItems.clear();
			this.currentPage = 1;
			this.hasMoreData = true;

			// Apply current filters after setting new items
			this.handleFilters();
		}
	}

	// Export for dashboard use
	window.DashboardMediaGridManager = DashboardMediaGridManager;

	// Initialize dashboard grid when DOM loads
	document.addEventListener('DOMContentLoaded', function() {
		if (document.getElementById('media-grid-container')) {
			window.dashboardMediaGridManager = new DashboardMediaGridManager('media-grid-container', {
				enableInfiniteScroll: true,
				animateChanges: true, // Enable animations on both mobile and desktop
				useIntersectionObserver: true,
				mobileAnimations: true // Specifically enable mobile-optimized animations
			});
		}
	});
}
