// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.924
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func PWAScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\t// Clean, robust PWA Manager\n\t\tclass PWAManager {\n\t\t\tconstructor() {\n\t\t\t\tthis.deferredPrompt = null;\n\t\t\t\tthis.userData = null;\n\t\t\t\tthis.swRegistration = null;\n\t\t\t\tthis.notificationsManager = null;\n\t\t\t\tthis.init();\n\t\t\t}\n\n\t\t\tasync init() {\n\t\t\t\tconsole.log('Initializing PWA Manager...');\n\n\t\t\t\t// Step 1: Fetch user data\n\t\t\t\tawait this.fetchUserData();\n\n\t\t\t\t// Step 2: Register service worker\n\t\t\t\tawait this.registerServiceWorker();\n\n\t\t\t\t// Step 3: Setup PWA install functionality\n\t\t\t\tthis.setupPWAInstall();\n\n\t\t\t\t// Step 4: Setup push notifications\n\t\t\t\tthis.setupPushNotifications();\n\t\t\t}\n\n\t\t\tasync fetchUserData() {\n\t\t\t\ttry {\n\t\t\t\t\tconst response = await fetch('/api/me');\n\t\t\t\t\tif (response.ok) {\n\t\t\t\t\t\tthis.userData = await response.json();\n\t\t\t\t\t\tconsole.log('User data fetched:', this.userData);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.error('Failed to fetch user data');\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Error fetching user data:', error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync registerServiceWorker() {\n\t\t\t\tif (!('serviceWorker' in navigator)) {\n\t\t\t\t\tconsole.log('Service Worker not supported');\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconsole.log('Registering service worker...');\n\t\t\t\t\tthis.swRegistration = await navigator.serviceWorker.register('/static/sw.js');\n\t\t\t\t\tconsole.log('Service Worker registered successfully:', this.swRegistration);\n\n\t\t\t\t\t// Don't wait for ready with timeout - just continue\n\t\t\t\t\t// The service worker will be available when needed\n\n\t\t\t\t\t// Handle updates\n\t\t\t\t\tif (this.swRegistration.addEventListener) {\n\t\t\t\t\t\tthis.swRegistration.addEventListener('updatefound', () => {\n\t\t\t\t\t\t\tconst newWorker = this.swRegistration.installing;\n\t\t\t\t\t\t\tif (newWorker) {\n\t\t\t\t\t\t\t\tnewWorker.addEventListener('statechange', () => {\n\t\t\t\t\t\t\t\t\tif (newWorker.state === 'installed' && navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t\t\t\tthis.showUpdateNotification();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.swRegistration;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error('Service Worker registration failed:', error);\n\t\t\t\t\t// Don't return null - try to get existing registration\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.swRegistration = await navigator.serviceWorker.getRegistration();\n\t\t\t\t\t\tconsole.log('Got existing service worker registration:', this.swRegistration);\n\t\t\t\t\t\treturn this.swRegistration;\n\t\t\t\t\t} catch (fallbackError) {\n\t\t\t\t\t\tconsole.error('Failed to get existing registration:', fallbackError);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetupPWAInstall() {\n\t\t\t\t// Listen for install prompt\n\t\t\t\twindow.addEventListener('beforeinstallprompt', (e) => {\n\t\t\t\t\te.preventDefault();\n\t\t\t\t\tthis.deferredPrompt = e;\n\t\t\t\t\tconsole.log('Install prompt available');\n\t\t\t\t\t// Show install button immediately when prompt is available\n\t\t\t\t\tthis.showInstallButton();\n\t\t\t\t});\n\n\t\t\t\t// Create install button if needed\n\t\t\t\tthis.createInstallButton();\n\t\t\t}\n\n\t\t\tcreateInstallButton() {\n\t\t\t\t// Check if already installed\n\t\t\t\tif (window.matchMedia('(display-mode: standalone)').matches ||\n\t\t\t\t\twindow.navigator.standalone === true) {\n\t\t\t\t\tconsole.log('App is already installed');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Use existing install button from template\n\t\t\t\tconst installSection = document.getElementById('mobile-install-section');\n\t\t\t\tconst installButton = document.getElementById('mobile-install-button');\n\n\t\t\t\tif (installButton) {\n\t\t\t\t\tinstallButton.addEventListener('click', () => this.installApp());\n\n\t\t\t\t\t// Show button for Firefox users (since they don't get beforeinstallprompt)\n\t\t\t\t\tif (navigator.userAgent.toLowerCase().includes('firefox')) {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tthis.showInstallButton();\n\t\t\t\t\t\t}, 1000);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tshowInstallButton() {\n\t\t\t\tconst installSection = document.getElementById('mobile-install-section');\n\t\t\t\tif (installSection) {\n\t\t\t\t\tinstallSection.classList.remove('hidden');\n\t\t\t\t\tconsole.log('Install button shown');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thideInstallButton() {\n\t\t\t\tconst installSection = document.getElementById('mobile-install-section');\n\t\t\t\tif (installSection) {\n\t\t\t\t\tinstallSection.classList.add('hidden');\n\t\t\t\t\tconsole.log('Install button hidden');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tasync installApp() {\n\t\t\t\tif (this.deferredPrompt) {\n\t\t\t\t\tthis.deferredPrompt.prompt();\n\t\t\t\t\tconst result = await this.deferredPrompt.userChoice;\n\t\t\t\t\tconsole.log('Install result:', result);\n\t\t\t\t\tthis.deferredPrompt = null;\n\n\t\t\t\t\tif (result.outcome === 'accepted') {\n\t\t\t\t\t\tthis.hideInstallButton();\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Show instructions for Firefox or other browsers\n\t\t\t\t\tthis.showManualInstallInstructions();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tsetupPushNotifications() {\n\t\t\t\t// Initialize notifications manager if available\n\t\t\t\tif (window.NotificationsManager) {\n\t\t\t\t\tthis.notificationsManager = new window.NotificationsManager(this.userData, this.swRegistration);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.log('NotificationsManager not available');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tshowUpdateNotification() {\n\t\t\t\tconst notification = document.createElement('div');\n\t\t\t\tnotification.className = 'fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg z-50';\n\t\t\t\tnotification.innerHTML = `\n\t\t\t\t\t<div class=\"flex items-center space-x-2\">\n\t\t\t\t\t\t<span>App updated! Refresh to apply.</span>\n\t\t\t\t\t\t<button onclick=\"window.location.reload()\" class=\"ml-2 underline\">Refresh</button>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\n\t\t\t\tdocument.body.appendChild(notification);\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tnotification.remove();\n\t\t\t\t}, 10000);\n\t\t\t}\n\n\t\t\tshowManualInstallInstructions() {\n\t\t\t\tconst instructions = document.createElement('div');\n\t\t\t\tinstructions.className = 'fixed bottom-4 right-4 max-w-sm bg-blue-600 text-white p-4 rounded-lg shadow-lg z-50';\n\t\t\t\tinstructions.innerHTML = `\n\t\t\t\t\t<div class=\"space-y-2\">\n\t\t\t\t\t\t<div class=\"flex items-center justify-between\">\n\t\t\t\t\t\t\t<span class=\"font-medium\">Install App</span>\n\t\t\t\t\t\t\t<button onclick=\"this.parentElement.parentElement.remove()\" class=\"text-white/80 hover:text-white\">✕</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<p class=\"text-sm\">Tap the menu (⋮) and look for \"Install\" or \"Add to Home Screen\"</p>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\n\t\t\t\tdocument.body.appendChild(instructions);\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tinstructions.remove();\n\t\t\t\t}, 15000);\n\t\t\t}\n\t\t}\n\n\t\t// Initialize when DOM is ready\n\t\tdocument.addEventListener('DOMContentLoaded', () => {\n\t\t\tnew PWAManager();\n\t\t});\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
