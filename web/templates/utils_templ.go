// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.906
package templates

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

// Shared utility scripts for common functionality across templates
func ToastScript() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<script>\n\t\tif (!window.showToast) {\n\t\t\twindow.showToast = function(message, toastType = 'info') {\n\t\t\t\t// Remove existing toasts\n\t\t\t\tconst existingToasts = document.querySelectorAll('.toast');\n\t\t\t\texistingToasts.forEach(toast => toast.remove());\n\n\t\t\t\t// Create new toast\n\t\t\t\tconst toast = document.createElement('div');\n\t\t\t\ttoast.className = 'toast fixed top-4 right-4 p-4 rounded-lg shadow-lg z-50 transition-all duration-300';\n\n\t\t\t\tconst typeClasses = {\n\t\t\t\t\tsuccess: 'bg-green-900 border border-green-700 text-green-100',\n\t\t\t\t\terror: 'bg-red-900 border border-red-700 text-red-100',\n\t\t\t\t\tinfo: 'bg-blue-900 border border-blue-700 text-blue-100',\n\t\t\t\t\twarning: 'bg-yellow-900 border border-yellow-700 text-yellow-100'\n\t\t\t\t};\n\n\t\t\t\ttoast.className += ' ' + (typeClasses[toastType] || typeClasses.info);\n\n\t\t\t\tconst icons = {\n\t\t\t\t\tsuccess: '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>',\n\t\t\t\t\terror: '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>',\n\t\t\t\t\tinfo: '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z\"></path>',\n\t\t\t\t\twarning: '<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z\"></path>'\n\t\t\t\t};\n\n\t\t\t\ttoast.innerHTML = `\n\t\t\t\t\t<div class=\"flex items-center\">\n\t\t\t\t\t\t<svg class=\"w-5 h-5 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t\t${icons[toastType] || icons.info}\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t<span>${message}</span>\n\t\t\t\t\t\t<button class=\"ml-4 text-current hover:opacity-70\" onclick=\"this.parentElement.parentElement.remove()\">\n\t\t\t\t\t\t\t<svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 18L18 6M6 6l12 12\"></path>\n\t\t\t\t\t\t\t</svg>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t`;\n\n\t\t\t\tdocument.body.appendChild(toast);\n\n\t\t\t\t// Auto-remove after 5 seconds\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (toast.parentElement) {\n\t\t\t\t\t\ttoast.remove();\n\t\t\t\t\t}\n\t\t\t\t}, 5000);\n\t\t\t};\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ButtonLoadingUtils() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "<script>\n\t\tif (!window.setButtonLoading) {\n\t\t\twindow.setButtonLoading = function(buttonId, loadingText = 'Loading...') {\n\t\t\t\tconst button = document.getElementById(buttonId);\n\t\t\t\tif (!button || button.disabled) return null;\n\n\t\t\t\t// Disable button and store original content\n\t\t\t\tbutton.disabled = true;\n\t\t\t\tconst originalContent = button.innerHTML;\n\t\t\t\tbutton.innerHTML = `\n\t\t\t\t\t<svg class=\"w-4 h-4 mr-2 animate-spin\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t<path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\"></path>\n\t\t\t\t\t</svg>\n\t\t\t\t\t${loadingText}\n\t\t\t\t`;\n\n\t\t\t\treturn originalContent;\n\t\t\t};\n\n\t\t\twindow.setButtonSuccess = function(buttonId, successText, iconPath) {\n\t\t\t\tconst button = document.getElementById(buttonId);\n\t\t\t\tif (!button) return;\n\n\t\t\t\tbutton.innerHTML = `\n\t\t\t\t\t<svg class=\"w-4 h-4 mr-2\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n\t\t\t\t\t\t${iconPath}\n\t\t\t\t\t</svg>\n\t\t\t\t\t${successText}\n\t\t\t\t`;\n\t\t\t};\n\n\t\t\twindow.restoreButton = function(buttonId, originalContent) {\n\t\t\t\tconst button = document.getElementById(buttonId);\n\t\t\t\tif (!button) return;\n\n\t\t\t\tbutton.disabled = false;\n\t\t\t\tbutton.innerHTML = originalContent;\n\t\t\t};\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ApiUtils() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<script>\n\t\tif (!window.makeApiRequest) {\n\t\t\twindow.makeApiRequest = function(url, method = 'POST', body = null) {\n\t\t\t\tconst options = {\n\t\t\t\t\tmethod: method,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif (body) {\n\t\t\t\t\toptions.body = JSON.stringify(body);\n\t\t\t\t}\n\n\t\t\t\treturn fetch(url, options)\n\t\t\t\t\t.then(response => response.json());\n\t\t\t};\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func DebounceUtil() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<script>\n\t\tif (!window.debounce) {\n\t\t\twindow.debounce = function(func, wait) {\n\t\t\t\tlet timeout;\n\t\t\t\treturn function executedFunction(...args) {\n\t\t\t\t\tconst later = () => {\n\t\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\t\tfunc(...args);\n\t\t\t\t\t};\n\t\t\t\t\tclearTimeout(timeout);\n\t\t\t\t\ttimeout = setTimeout(later, wait);\n\t\t\t\t};\n\t\t\t};\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func SmoothNavigationUtils() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<script>\n\t\tif (!window.smoothNavigate) {\n\t\t\twindow.smoothNavigate = function(url, options = {}) {\n\t\t\t\tconst {\n\t\t\t\t\tfadeOut = true,\n\t\t\t\t\tshowLoader = true,\n\t\t\t\t\tdelay = 150\n\t\t\t\t} = options;\n\n\t\t\t\tif (fadeOut) {\n\t\t\t\t\tconst main = document.querySelector('main');\n\t\t\t\t\tif (main) {\n\t\t\t\t\t\tmain.style.transition = 'opacity 150ms ease-out';\n\t\t\t\t\t\tmain.style.opacity = '0';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (showLoader) {\n\t\t\t\t\tconst loader = document.createElement('div');\n\t\t\t\t\tloader.id = 'page-loader';\n\t\t\t\t\tloader.className = 'fixed inset-0 bg-gray-950/50 backdrop-blur-sm z-50 flex items-center justify-center';\n\t\t\t\t\tloader.innerHTML = `\n\t\t\t\t\t\t<div class=\"flex items-center space-x-3 bg-gray-900 px-6 py-4 rounded-lg border border-gray-700\">\n\t\t\t\t\t\t\t<div class=\"animate-spin rounded-full h-6 w-6 border-b-2 border-indigo-500\"></div>\n\t\t\t\t\t\t\t<span class=\"text-gray-300\">Loading...</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t`;\n\t\t\t\t\tdocument.body.appendChild(loader);\n\t\t\t\t}\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\twindow.location.href = url;\n\t\t\t\t}, delay);\n\t\t\t};\n\n\t\t\t// Enhanced API request with better error handling and loading states\n\t\t\twindow.makeApiRequestEnhanced = function(url, options = {}) {\n\t\t\t\tconst {\n\t\t\t\t\tmethod = 'POST',\n\t\t\t\t\tbody = null,\n\t\t\t\t\tshowProgress = true,\n\t\t\t\t\toptimistic = false,\n\t\t\t\t\tonProgress = null\n\t\t\t\t} = options;\n\n\t\t\t\tconst requestOptions = {\n\t\t\t\t\tmethod: method,\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t},\n\t\t\t\t};\n\n\t\t\t\tif (body) {\n\t\t\t\t\trequestOptions.body = JSON.stringify(body);\n\t\t\t\t}\n\n\t\t\t\t// Show progress indicator\n\t\t\t\tif (showProgress && onProgress) {\n\t\t\t\t\tonProgress('started');\n\t\t\t\t}\n\n\t\t\t\treturn fetch(url, requestOptions)\n\t\t\t\t\t.then(response => {\n\t\t\t\t\t\tif (showProgress && onProgress) {\n\t\t\t\t\t\t\tonProgress('processing');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!response.ok) {\n\t\t\t\t\t\t\tthrow new Error(`HTTP ${response.status}: ${response.statusText}`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn response.json();\n\t\t\t\t\t})\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\tif (showProgress && onProgress) {\n\t\t\t\t\t\t\tonProgress('completed');\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t})\n\t\t\t\t\t.catch(error => {\n\t\t\t\t\t\tif (showProgress && onProgress) {\n\t\t\t\t\t\t\tonProgress('error', error);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t});\n\t\t\t};\n\n\t\t\t// Virtual scrolling for large lists\n\t\t\twindow.initVirtualScroll = function(containerId, itemHeight = 100) {\n\t\t\t\tconst container = document.getElementById(containerId);\n\t\t\t\tif (!container) return;\n\n\t\t\t\tconst items = Array.from(container.children);\n\t\t\t\tconst totalItems = items.length;\n\t\t\t\tconst containerHeight = container.clientHeight;\n\t\t\t\tconst visibleItems = Math.ceil(containerHeight / itemHeight) + 2; // Buffer\n\n\t\t\t\tlet scrollTop = 0;\n\t\t\t\tlet startIndex = 0;\n\n\t\t\t\tfunction updateVisibleItems() {\n\t\t\t\t\tstartIndex = Math.floor(scrollTop / itemHeight);\n\t\t\t\t\tconst endIndex = Math.min(startIndex + visibleItems, totalItems);\n\n\t\t\t\t\t// Hide all items\n\t\t\t\t\titems.forEach((item, index) => {\n\t\t\t\t\t\tif (index >= startIndex && index < endIndex) {\n\t\t\t\t\t\t\titem.style.display = 'block';\n\t\t\t\t\t\t\titem.style.transform = `translateY(${index * itemHeight}px)`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\titem.style.display = 'none';\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcontainer.addEventListener('scroll', () => {\n\t\t\t\t\tscrollTop = container.scrollTop;\n\t\t\t\t\trequestAnimationFrame(updateVisibleItems);\n\t\t\t\t});\n\n\t\t\t\tupdateVisibleItems();\n\t\t\t};\n\t\t}\n\t</script>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
